<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 科技 | 逆旅，行人]]></title>
  <link href="http://qiusli.github.io/blog/categories/ke-ji/atom.xml" rel="self"/>
  <link href="http://qiusli.github.io/"/>
  <updated>2015-10-22T06:33:24-06:00</updated>
  <id>http://qiusli.github.io/</id>
  <author>
    <name><![CDATA[李秋实]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript中的类型]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/21/js-types/"/>
    <updated>2015-10-21T20:34:58-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/21/js-types</id>
    <content type="html"><![CDATA[<p>JavaScript一共有两种类型,非别为原始类型和引用类型.JavaScript使用一个叫做variable object的东西来记录创建的数据类型,如果新建数据为原始类型,则直接存储在variable object中,如果为引用类型,则用variable object来存放指向引用类型的指针.</p>

<!-- more -->


<h2>原始类型</h2>

<p>JavaScript一共有5种原始类型:
1. Boolean
2. Number
3. String
4. Null
5. Undefined
当把一个存储原始类型数据的变量赋值给另一个变量时,两个变量存储的值一样,但分别拥有的是各自的拷贝.</p>

<pre><code class="JavaScript">var color1 =  "red";
var color2 = color1;
color1 = "green";
console.log(color1); // green
console.log(color2); // red
</code></pre>

<h4>typeof 关键字</h4>

<p>用来判断当前原始类型的具体类型:</p>

<pre><code class="JavaScript">console.log(typeof 10);        // number
console.log(typeof "hello");   // string
console.log(typeof true);      // boolean
console.log(typeof null);      // object
console.log(typeof undefined); // undefined
</code></pre>

<h4>== 与 ===</h4>

<p>两者的作用基本一样,唯一的不同就是<code>==</code>在比较的时候会进行类型转换,而<code>===</code>则按原值比较.</p>

<pre><code class="JavaScript">console.log("5" == 5);           // true
console.log("5" === 5);          // false
console.log(true == "true");     // false
console.log(true === "true");    // false
console.log(null == null);       // true
console.log(null === null);      // true
console.log(null == undefined);  // true
console.log(null === undefined); // false
</code></pre>

<h2>引用类型</h2>

<p>引用类型即对象,它是由一组键值对组成,很像其他语言中的hash.键可以为string或者一般的literal,值为原始类型或者方法.创建对象一般有两种方法: 使用new和使用object literal.</p>

<pre><code class="JavaScript">1. 
var book = new Object();
book.name = "Head first Java"
book.year = 2014

2.
// literal
var book = {
    name: "javascript oo design",
    year: 2014
}
</code></pre>

<p>与原始类型的赋值不同的是,引用类型在赋值过程中不会在内存中再次拷贝指向数据,而是仅仅创建一个新的指针指向原来的引用.</p>

<pre><code class="JavaScript">var obj1 = new Object();
var obj2 = obj1;
obj1.myCustomProperty = "Qiushi";
console.log(obj2.myCustomProperty); // "Qiushi"
</code></pre>

<p>和Java类似,JavaScript也有垃圾回收机制,也即没有指针指向对象时,其被回收.</p>

<pre><code class="JavaScript">var obj = new Object();
obj = null;
</code></pre>

<h3>原始类型的包装</h3>

<p>原始类型中的String,Number和Boolean分别有其对应的包装类型,当系统检测到原始类型被读取并被当做对象使用时,系统会创建一个零时的原始类型的包装类,当包装类不再被使用的时候立即被系统回收.</p>

<pre><code class="JavaScript">var name = "Qiushi";
var firstChar = name.charAt(0);
console.log(firstChar);         // "Q"

在系统中被解释为:
var name = "Qiushi";
var tmp = new String(name);
var firstChar = tmp.charAt(0);
tmp = null;
console.log(firstChar);
</code></pre>

<p>例如如果我们按照下面这么做:</p>

<pre><code class="JavaScript">var name = "Nicholas";name.last = "Zakas";console.log(name.last);    // undefined

在系统中被解释为:
var name = "Nicholas";
var tmp = new Sring(name)tmp.last = "Zakas";
tmp = null                 // 零时变量被摧毁

var tmp = new String(name)console.log(name.last);   
tmp = null
</code></pre>

<p>再看下面这个例子:</p>

<pre><code class="JavaScript">var name = "Qiushi"
console.log(name instanceof String) // false
</code></pre>

<p>name在这里没有被当做对象使用(obj.xxx),所以没有零时对象创立,而原始类型不是其包装类的引用,所以会返回false.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C#中的Delegate和Event]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/17/event-and-delegate-in-c-number/"/>
    <updated>2015-10-17T15:06:20-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/17/event-and-delegate-in-c-number</id>
    <content type="html"><![CDATA[<p>简单来说，deletegate就是一个指向function的指针，下面是一个其最简单的用法：</p>

<pre><code class="c#">delegate returntype delegateName(parameters);
</code></pre>

<!-- more -->


<p>上面的代码<em>声明</em>了一个delegate，但是它并没有指向任何方法，有2种方法让delegate指向某个方法</p>

<ol>
<li>使用new创建，然后把需要指向的方法作为参数</li>
<li>直接赋值</li>
</ol>


<pre><code class="c#">1. delegateName dl1 = new delegateName(someMethod);
2. delegateName dl2 = someMethod;
</code></pre>

<p>当完成上面2步后，delegate就指向了某个方法，然后可以直接通过delegate调用这个方法：
<code>c#
dl1(parameters);
</code></p>

<p>既然我们可以直接调用类的方法，为什么还要使用delegate？下面这个例子来说明原因：</p>

<pre><code class="c#">namespace Delegate_Event
{
    class Calculator
    {
        public int add(int a, int b)
        {
            return a + b;
        }

        public int minus(int a, int b)
        {
            return a - b;
        }
    }

    class MainClass
    {
        delegate int dele(int x, int y);
        public static void Main (string[] args)
        {
            Calculator cal = new Calculator ();
            Console.WriteLine (cal.add (1, 3));

            dele objDele = cal.add;
            Console.WriteLine(objDele (11, 2));
        }
    }
}
</code></pre>

<p>我们把MainClass想象成client，Calculator想象成server，client想要调用server端的代码，首先须奥创建客户端的对象，然后通过对象来调用。这违反了encapsulation原则，因为server端的所有东西都暴露给了client。下面我在client端添加一个delegate，然后再添加一个方法来决定delegate指向的方法：</p>

<pre><code class="c#">namespace Delegate_Event
{
    class Calculator
    {
        public delegate int CalculatorDelegate(int a, int b);
        public int add(int a, int b)
        {
            return a + b;
        }

        public int minus(int a, int b)
        {
            return a - b;
        }

        public CalculatorDelegate assignMethod(string methodName) 
        {
            CalculatorDelegate delegateObj = null;
            if(methodName.Equals ("add"))
            {
                delegateObj = add;
            }

            if(methodName.Equals ("minus"))
            {
                delegateObj = minus;
            }

            return delegateObj;
        }
    }

    class MainClass
    {
        delegate int dele(int x, int y);
        public static void Main (string[] args)
        {
            Calculator cal = new Calculator ();
            Console.WriteLine (cal.assignMethod ("add").Invoke (10, 22));
        }
    }
}
</code></pre>

<p>这样，如果我需要在server端做出一些改变(例如新增一个multiply方法)，我在client端所做的改变就会很少，只需修改assignMend中的参数，分离了server端和client端的耦合。</p>

<h1>Multicast Delegate</h1>

<p>如果我想要让我的代理指向多个方法，那么在执行这个代理时，所有被指向的方法都会被一一执行。语法如下：</p>

<pre><code class="c#">int add(int a, int b){...}
int minus(int a, int b){...}
int multiply(int a, int b){...}

delegate theDele(int a, int b);
theDele += add;
theDele += minus;
theDele += multiply;
theDele(10, 20);
</code></pre>

<h1>Multicast Delegate的应用</h1>

<p>在pubisher-subscriber的模式中使用得最多。比如我有一个server端发送信息，多个client会接受信息:</p>

<pre><code class="c#">namespace Delegate_Event
{
    class Publisher
    {
        public delegate void PublishMsgDelegate(string msg);
        public PublishMsgDelegate publishMsg = null;
        public void publish(string msg) 
        {
            publishMsg (msg);
        }
    }

    class SendViaEmail
    {
        public void sendMsg(string msg)
        {
            Console.WriteLine (msg + " sent via email");
        }
    }

    class SendViaSMS
    {
        public void sendMsg(string msg)
        {
            Console.WriteLine (msg + " sent via SMS");
        }
    }

    class MainClass
    {
        public static void Main (string[] args)
        {
            Publisher pub = new Publisher ();
            SendViaEmail se = new SendViaEmail ();
            SendViaSMS sm = new SendViaSMS ();
            pub.publishMsg += se.sendMsg;
            pub.publishMsg += sm.sendMsg;
            pub.publish ("hello world");
        }
    }
}
</code></pre>

<p>这样只需在server端注册某个client就能给其发送消息。在这里有一个问题就是，无论我是否订阅了全部或者部分服务，我都会从所有渠道收到信息，因为server端就是这么设置的。为了解决这个问题，我们可以在SendViaMail和SMS里新增2个subscribe方法，说明是否订阅。</p>

<pre><code class="c#">class SendViaEmail
    {
        public void sendMsg(string msg)
        {
            Console.WriteLine (msg + " sent via email");
        }

        public void subscribe(Publisher pub)
        {
            pub.publishMsg += sendMsg;
        }
    }

    class SendViaSMS
    {
        public void sendMsg(string msg)
        {
            Console.WriteLine (msg + " sent via SMS");
        }

        public void subscribe(Publisher pub)
        {
            pub.publishMsg += sendMsg;
        }
    }

    class MainClass
    {
        public static void Main (string[] args)
        {
            Publisher pub = new Publisher ();
            SendViaEmail se = new SendViaEmail ();
            SendViaSMS sm = new SendViaSMS ();
            se.subscribe (pub);
//          sm.subscribe (pub);
            pub.publish ("hello world");
        }
    }
</code></pre>

<p>上面的改变给了我们更多的灵活性，即可以选择订阅。但是上面的方案也会有问题，它暴露了server端给client端，client端通过server端的delegate订阅，同时client端也能修改server端的delegate。比如:</p>

<pre><code class="c#">public void subscribe(Publisher pub)
{
    pub.publishMsg += sendMsg;
    pub.publishMsg = null;
}
</code></pre>

<p>它把server端的delegate所指向的方法全部给抹去了，这样所有client的所有订阅都全部失效。为了解决这个问题，event被引入了进来。</p>

<h1>Event</h1>

<p>Event的概念就是在client和server之间添加一个layer，让client不能随意改变server端的delegate指向，也不能在client端直接invoke。用event重写上面的代码:</p>

<pre><code class="c#">namespace Delegate_Event
{
    class Publisher
    {
        public delegate void PublishMsgDelegate(string msg);
        public event PublishMsgDelegate messageEvent = null;
        public void publish(string msg) 
        {
            messageEvent (msg);
        }
    }

    class SendViaEmail
    {
        public void sendMsg(string msg)
        {
            Console.WriteLine (msg + " sent via email");
        }

        public void subscribe(Publisher pub)
        {
            pub.messageEvent += sendMsg;
        }
    }

    class SendViaSMS
    {
        public void sendMsg(string msg)
        {
            Console.WriteLine (msg + " sent via SMS");
        }

        public void subscribe(Publisher pub)
        {
            pub.messageEvent += sendMsg;
        }
    }

    class MainClass
    {
        public static void Main (string[] args)
        {
            Publisher pub = new Publisher ();
            SendViaEmail se = new SendViaEmail ();
            SendViaSMS sm = new SendViaSMS ();
            se.subscribe (pub);
            sm.subscribe (pub);
            pub.publish ("hello world");
        }
    }
}
</code></pre>

<p>如果驶入在SendViaEmail和SendViaSMS中调用和修改event，系统会报错。简而言之，在client端能对event所做的只能是添加或则删除操作。</p>
]]></content>
  </entry>
  
</feed>
