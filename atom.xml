<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[逆旅，行人]]></title>
  <link href="http://qiusli.github.io/atom.xml" rel="self"/>
  <link href="http://qiusli.github.io/"/>
  <updated>2015-10-31T18:12:34-06:00</updated>
  <id>http://qiusli.github.io/</id>
  <author>
    <name><![CDATA[李秋实]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[javaScript中的This关键字]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/31/js-this/"/>
    <updated>2015-10-31T16:44:42-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/31/js-this</id>
    <content type="html"><![CDATA[<h2>一言以蔽之</h2>

<p>JavaScript中this关键字的应用一直是个难点，但是只需要记住一点：this始终定义在函数中，当这个函数被调用的时候，this会执行调用该函数的那个对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">firstName</span><span class="o">:</span> <span class="s2">&quot;Qiushi&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&quot;Li&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">fullName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span><span class="p">();</span> <span class="c1">// 会输出两行 &quot;Qiushi Li&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码定义了一个person对象，fullName方法是其中一个property，this定义在呢fullName方法中。在这个方法没有被person对象调用之前，this不指向任何对象，当执行<code>person.fullName()</code>后，this指向person对象，所以会输出person对象的firstName和lastName。下面再看一个类似的例子，在浏览器中执行jQuery代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;button&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的this定义定义在一个匿名函数里，这个匿名函数又作为click的参数传递。在jQuery里，系统默认把this和调用click的对象绑定在一起，所以这里的this指向的是button对象，这和JavaScript稍微有点不同。</p>

<h2>this在不同情况下的指向问题</h2>

<h3>1. 在全局范围内使用this</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&quot;Qiushi&quot;</span><span class="p">,</span> <span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&quot;Li&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">showFullName</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">firstName</span><span class="o">:</span> <span class="s2">&quot;Eric&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&quot;Chho&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">showFullName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">showFullName</span><span class="p">();</span>         <span class="c1">// Qiushi Li</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">showFullName</span><span class="p">();</span>  <span class="c1">// Qiushi Li</span>
</span><span class='line'><span class="nx">person2</span><span class="p">.</span><span class="nx">showFullName</span><span class="p">();</span> <span class="c1">// Eric Chho</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果直接调用showFullName，系统会调用全局showFullName函数，在那个函数里的firstName和lastName亦是全局变量firstName和lastName。如果食用window调用，和直接调用一样，都是被全局对象，即window对象调用。最后我们食用person2对象对用其内部定义的showFullName方法，this会指向person2对象，所以this.firstName和this.lastName会是person2里的属性。</p>

<h3>2. 在闭包里使用this</h3>

<p>闭包，即定义在一个函数内部的函数，通常情况下，闭包能使用其外部函数里定义的属性，但是闭包不能使用外部函数的this。具体看下面这个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">tournament</span><span class="o">:</span> <span class="s2">&quot;The Masters&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Kevin&quot;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">27</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Rashmi&quot;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">26</span><span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">clickHandler</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;What is THIS referring to? &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is playing at &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">tournament</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">clickHandler</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码会输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">What</span> <span class="nx">is</span> <span class="nx">THIS</span> <span class="nx">referring</span> <span class="nx">to</span><span class="o">?</span> <span class="p">[</span><span class="nx">object</span> <span class="nx">global</span><span class="p">]</span>
</span><span class='line'><span class="nx">Kevin</span> <span class="nx">is</span> <span class="nx">playing</span> <span class="nx">at</span> <span class="kc">undefined</span>
</span><span class='line'><span class="nx">What</span> <span class="nx">is</span> <span class="nx">THIS</span> <span class="nx">referring</span> <span class="nx">to</span><span class="o">?</span> <span class="p">[</span><span class="nx">object</span> <span class="nx">global</span><span class="p">]</span>
</span><span class='line'><span class="nx">Rashmi</span> <span class="nx">is</span> <span class="nx">playing</span> <span class="nx">at</span> <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>clickHander作为user对象里的一个属性，其指向一个方法，在这个方法内部，我们首先遍历user对象的data property，这里的this指向的是调用clickHandler方法的对象，即user对象。在forEach里，我们声明了一个匿名函数，在这个匿名函数里也使用了this。第一行说明闭包里的this指向的不是user，而是global，如果在浏览器里运行，会是window对象。第二行的person.name会正确输出名字，因为这个person，即匿名函数里的参数是遍历数组里在某一时刻的某个值，但是this.tournament会输出undefined，因为这个this此时不是指向user对象，而是指向了全局对象，即global或window，但是它们均没有tournament这个property，所以会输出undefined。</p>

<h4>解决方案</h4>

<p>既然我们想使用外部的this,我们可以把外部的this保存在一个变量里,然后在闭包里使用这个变量就是了.虽然闭包不能使用外部函数的this,但它能使用外部函数的变量啊.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">user2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">tournament</span><span class="o">:</span> <span class="s2">&quot;The Masters&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Kevin&quot;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">27</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Rashmi&quot;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">26</span><span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">clickHandler</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>           <span class="c1">// 唯一的区别</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;What is THIS referring to? &quot;</span> <span class="o">+</span> <span class="nx">that</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is playing at &quot;</span> <span class="o">+</span> <span class="nx">that</span><span class="p">.</span><span class="nx">tournament</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">user2</span><span class="p">.</span><span class="nx">clickHandler</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码会输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">What</span> <span class="nx">is</span> <span class="nx">THIS</span> <span class="nx">referring</span> <span class="nx">to</span><span class="o">?</span> <span class="p">[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">]</span>
</span><span class='line'><span class="nx">Kevin</span> <span class="nx">is</span> <span class="nx">playing</span> <span class="nx">at</span> <span class="nx">The</span> <span class="nx">Masters</span>
</span><span class='line'><span class="nx">What</span> <span class="nx">is</span> <span class="nx">THIS</span> <span class="nx">referring</span> <span class="nx">to</span><span class="o">?</span> <span class="p">[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">]</span>
</span><span class='line'><span class="nx">Rashmi</span> <span class="nx">is</span> <span class="nx">playing</span> <span class="nx">at</span> <span class="nx">The</span> <span class="nx">Masters</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 包含this的函数被直接执行,而不是被对象调用</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Sam&quot;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">28</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Kurly&quot;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">21</span><span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">user3</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Roy&quot;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">26</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Sean&quot;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">27</span><span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">showData</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">rand</span> <span class="o">=</span> <span class="p">((</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">|</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">rand</span><span class="p">].</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">rand</span><span class="p">].</span><span class="nx">age</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">showUserData</span> <span class="o">=</span> <span class="nx">user3</span><span class="p">.</span><span class="nx">showData</span><span class="p">;</span>
</span><span class='line'><span class="nx">showUserData</span><span class="p">();</span>  <span class="c1">// 会输出sam或者kurly</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为此时虽然调用的user3内部的方法,但是因为这个方法没有被某个对象调用,所以this会指向全局对象,所以this.data会是全局对象的变量,即最上面定义的data.</p>

<h4>解决方案</h4>

<p>使用bind,apply等方法强行绑定this的指向,然后执行即可.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">showUserData</span> <span class="o">=</span> <span class="nx">user3</span><span class="p">.</span><span class="nx">showData</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">user3</span><span class="p">);</span>
</span><span class='line'><span class="nx">showUserData</span><span class="p">();</span> <span class="c1">// Sean: 27</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一句话的意思是无论在什么情况下,user3对象的showData方法里的this都指向user3对象,所以下面即使直接调用该方法,this也会始终指向user3对象.</p>

<h3>4. this被定义在从其他地方借来的方法中</h3>

<p>有时候,我们在定义函数或对象时使用其他地方已经定义过的方法,例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gameController</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">scores</span><span class="o">:</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">77</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">avgScore</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">players</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Ruth&quot;</span><span class="p">,</span> <span class="nx">playerId</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">22</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Shawnee&quot;</span><span class="p">,</span> <span class="nx">playerId</span><span class="o">:</span> <span class="mi">101</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">21</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">appController</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">scores</span><span class="o">:</span> <span class="p">[</span><span class="mi">900</span><span class="p">,</span> <span class="mi">845</span><span class="p">,</span> <span class="mi">809</span><span class="p">,</span> <span class="mi">950</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">avgScore</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">avg</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">sumOfScores</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">scores</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">cur</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">cur</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">avgScore</span> <span class="o">=</span> <span class="nx">sumOfScores</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">scores</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">gameController</span><span class="p">.</span><span class="nx">avgScore</span> <span class="o">=</span> <span class="nx">appController</span><span class="p">.</span><span class="nx">avg</span><span class="p">();</span> <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里gameController你的avgScore预留为null,目的是借用appController里定义的方法来使用自己的数据去计算结果.但是avg方法里的this仍然指向appController对象,因为avg方法是被其调用的,然后更新的this.avgScore也只是appController里的那个property,所以gameController里的acgScore仍然是null.</p>

<h4>解决方案</h4>

<p>把avg里的this强行绑定为指向gameController.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">appController</span><span class="p">.</span><span class="nx">avg</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">gameController</span><span class="p">,</span> <span class="nx">gameController</span><span class="p">.</span><span class="nx">avgScore</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">gameController</span><span class="p">.</span><span class="nx">avgScore</span><span class="p">);</span>  <span class="c1">// 46.4</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">appController</span><span class="p">.</span><span class="nx">avgScore</span><span class="p">);</span>   <span class="c1">// null</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为此时avg里的this指向了gameController,即使再次使用appController去调用它,其this也不会改变,所以不会更新appController里的avgScore这个property,输出仍然为null.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中的闭包]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/27/js-closure/"/>
    <updated>2015-10-27T19:02:20-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/27/js-closure</id>
    <content type="html"><![CDATA[<h2>为什么要用闭包</h2>

<p>在JavaScript中没有私有变量的概念，即使一个变量定义在方法或者对象内部，在外面也仍然能够直接访问，闭包的出现解决了这个问题。</p>

<h2>什么是闭包</h2>

<p>简单地说，闭包就是定义在一个函数内部的函数，它能访问其父级函数里定义的变量。比如下面这个例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">function</span> <span class="nx">outer</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">inner</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">inner</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">k</span> <span class="o">=</span> <span class="nx">outer</span><span class="p">();</span>
</span><span class='line'><span class="nx">k</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">k</span><span class="p">());</span> <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>inner定义在outer内部，它能访问定义在outer中的变量i，outer返回inner函数的引用。变量k接受outer函数执行后的返回值（即inner），然后执行一次，i增加了1，最后再执行了一次，最后被打印出来。我们看到在outer执行完并返回之后，定义在outer内部的变量i并没有随之消逝，而是一直存在于内存中直到整个程序结束。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">sayName</span><span class="p">(</span><span class="nx">firstname</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="s2">&quot;Full name: &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">inner</span><span class="p">(</span><span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">firstname</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">inner</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">sayName</span><span class="p">(</span><span class="s2">&quot;Qiushi&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;Li&quot;</span><span class="p">));</span>      <span class="c1">// Full name: Qiushi Li</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的程序第一次调用sayName的时候传入了firstname，然后x和firstname都被记录在内存中，然后inner函数被返回并被a引用。下一次执行a的时候，其实是执行了inner函数，这时lastname被传入，结合之前记录的结合起来形成了最终的结果。</p>

<p>使用闭包实现getter和setter并隐藏被操作的变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">modify</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">i</span> <span class="o">=</span> <span class="nx">k</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">modify</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">get</span><span class="p">());</span> <span class="c1">// 100</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">103</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">get</span><span class="p">());</span> <span class="c1">// 103</span>
</span></code></pre></td></tr></table></div></figure>


<h2>闭包的原理</h2>

<p>我们都知道一个变量或者函数都有其作用域和定义域，它们不能脱离定义其的环境。例如一个定义在函数中的变量，当这个函数执行完毕并返回结果之后，定义在其中的变量也会被系统回收。类似于Java，Javavascript也有垃圾回收机制，可以概括为:
1. 如果一个对象没有被其他对象指向，它会被GC回收
2. 如果两个对象互相指向，同时不再被其他对象指向，那么这2个对象都会被回收</p>

<p>回到闭包的原理上来，当我们把内部函数返回时，它通常会被外部的一个变量引用，这时系统不能回收内部函数，同时因为这个内部函数依赖于定义其的外部函数而存在，所以这个内部函数的外部环境也不能被回收，所以定义在其中的变量也一直常驻于内存。虽然这个变量在内存中，但是我们不能通过除了内部函数访问之外的方式去访问它，因为外部函数已经执行完毕了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">increase1</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">a</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">increase2</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">a</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">b</span><span class="o">:</span><span class="nx">increase1</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">c</span><span class="o">:</span><span class="nx">increase2</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">b</span><span class="p">();</span>      <span class="c1">//2</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">c</span><span class="p">();</span>      <span class="c1">//3</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子的意思是，首先定义一个外部函数，它里面有两个内部函数，返回一个有两个property的对象，这两个property分别是对两个内部函数的引用。这个外部函数在定义完成之后被立即执行，所以obj指向的是包含两个property的对象。然后obj调用那个对象的property，访问property指向的内部函数。</p>

<h2>写闭包常犯的错</h2>

<p>我们来看下面这段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">addId</span><span class="p">(</span><span class="nx">dogArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">commonPre</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">dogArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">dogArray</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;id&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">commonPre</span> <span class="o">+</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">dogArray</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Ted&quot;</span><span class="p">,</span> <span class="nx">id</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">()},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Snoop&quot;</span><span class="p">,</span> <span class="nx">id</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">()},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Husky&quot;</span><span class="p">,</span> <span class="nx">id</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">()}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'><span class="nx">addId</span><span class="p">(</span><span class="nx">dogArray</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ted</span> <span class="o">=</span> <span class="nx">dogArray</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ted</span><span class="p">[</span><span class="s2">&quot;id&quot;</span><span class="p">]());</span> <span class="c1">// 103</span>
</span></code></pre></td></tr></table></div></figure>


<p>预计输出的结果应该是100，为什么是103呢？原因久在于在for循环时，每个dogArray元素的id property被赋值了一个方法，即指向了那个方法，但是那个方法并没有立即执行，而是在试图打印的时候才开始执行。同时那个方法中存放的是对i的引用，即for循环中的i，而不是i的值，所以在for循环执行完成之后i的值是3，所以该内部函数在执行的时候i等于3，得到最终结果为103.</p>

<p>怎么修改呢？其实很简单，就是在定义该内部函数的地方立即执行它，此时i的引用的值就是当前i的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="c1">// modified</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">addIdBetter</span><span class="p">(</span><span class="nx">dogArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">commonPre</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">dogArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">dogArray</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;id&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">commonPre</span> <span class="o">+</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">})();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">addIdBetter</span><span class="p">(</span><span class="nx">dogArray</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">snoop</span> <span class="o">=</span> <span class="nx">dogArray</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">snoop</span><span class="p">[</span><span class="s2">&quot;id&quot;</span><span class="p">]);</span> <span class="c1">// 101</span>
</span></code></pre></td></tr></table></div></figure>


<h2>闭包的潜在危害</h2>

<p>因为外部函数在其内部函数被引用时不能被释放，所以会增加内存的消耗。</p>

<p>简而言之，闭包的出现使Javascript隐藏内部变量成为可能，他是Javascript中的难点，也是其特色之一。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[归去来兮辞]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/25/guiqulaixi/"/>
    <updated>2015-10-25T22:48:58-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/25/guiqulaixi</id>
    <content type="html"><![CDATA[<p>归去来兮，田园将芜胡不归！既目以心为形役，奚惆怅而独悲？悟已往之不谏，知来者之可追。实迷途其未远，觉今是而昨非。舟遥遥以轻飏，风飘飘而吹衣。问征夫以前路，恨晨光之熹微。</p>

<p>乃瞻衡宇，载欣载奔。僮仆欢迎，稚子候门。三径就荒，松菊犹存。携幼入室，有酒盈樽。引壶觞以自酌，眄庭柯以怡颜。倚南窗以寄傲，审容膝之易安。园日涉以成趣，门虽设而常关。策扶老以流憩，时矫首而遐观。云无心以出岫，鸟倦飞而知还。景翳翳以将入，抚孤松而盘桓。</p>

<p>归去来兮，请息交以绝遊。世与我而相违，复驾言兮焉求？悦亲戚之情话，乐琴书以消忧。农人告余以春及，将有事于西畴。或命巾车，或棹孤舟。既窈窕以寻壑，亦崎岖而经邱。木欣欣以向荣，泉涓涓而始流。善万物之得时，感吾生之行休。</p>

<p>已矣乎！寓形宇内复几时！曷不委心任去留？胡为乎遑遑欲何之？富贵非吾愿，帝乡不可期。怀良辰以孤往，或植杖而耘耔。登东皋以舒啸，临清流而赋诗。聊乘化以归尽，乐天天命复奚疑！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中的继承]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/25/js-inheritance/"/>
    <updated>2015-10-25T16:30:11-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/25/js-inheritance</id>
    <content type="html"><![CDATA[<p>由于Javascript中的每个对象都有一个prototye,它也是对象的一个property.这个prototype也有自己的prototype,它能继承自那个prototype,而当前对象也能从自己的prototype那里继承property,这样就形成了一个prototype chain,这就是Javascript中继承的实现方式.简单来说,我们可以把当前对象的prototype(原型)看成是一个模板,当前对象继承自那个模板,然后扩充自己的方法.当前对象从其prototype那里获得一些property,而当前对象的prototype从其自身的prototype(prototype&rsquo;s prototype)那里也获得一些property.每一个通过Object literal或者new Object这种方式创建出的对象,其prototype指向object.prototype,意味着当前对象能获得object.prototype里的property.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">book</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;red and black&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">book</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p</span> <span class="o">==</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>   <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有对象都从Object.prototype那里继承了一些方法,最常见的有5个:<code>hasOwnProperty</code>, <code>propertyIsEnumerable</code>,<code>isPrototypeOf</code>,<code>valueOf</code>,<code>toString</code>.</p>

<p>实现继承最简单的方式就是显式指定当前对象的prototype(原型),这样它就能从其原型那里获得方法.我们可以使用Object.create()方法来实现这个目的,它会新创建一个对象,然后这个对象可以被赋值给一个变量.create第一个参数指定了谁是当前对象的原型,第二个参数是可选的,意味着一些自定义的property和其属性.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="c1">// specify reference of prototypr of current object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Qiushi&quot;</span><span class="p">};</span>
</span><span class='line'><span class="c1">// is same as</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="s2">&quot;Qiushi&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="c1">// inherit from other objects</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">company</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Goldman Sachs&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sayName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Company name is &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">// anotherCompany自己定义了name property,它覆盖了从company那里继承来的name property.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">anotherCompany</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">company</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="s2">&quot;ThoughtWorks&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">company</span><span class="p">.</span><span class="nx">sayName</span><span class="p">();</span>    <span class="c1">// Company name is Goldman Sachs</span>
</span><span class='line'><span class="nx">anotherCompany</span><span class="p">.</span><span class="nx">sayName</span><span class="p">();</span>  <span class="c1">// Company name is ThoughtWorks</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">company</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;sayName&quot;</span><span class="p">));</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">anotherCompany</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;sayName&quot;</span><span class="p">));</span> <span class="c1">// false</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">company</span><span class="p">.</span><span class="nx">isPrototypeOf</span><span class="p">(</span><span class="nx">anotherCompany</span><span class="p">));</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">anotherCompany</span><span class="p">)</span> <span class="o">==</span> <span class="nx">company</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">thirdCompany</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">anotherCompany</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="s2">&quot;ThinkGeek&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">thirdCompany</span><span class="p">));</span> <span class="c1">// { name: &#39;ThoughtWorks&#39; }</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面这张图解释了原型链:</p>

<p><img src="http://qiusli.github.io/images/JS_inheritance/1.png"></p>

<p>当一个方法被调用时,系统会首先去当前对象的own property里寻找,如果找到了就返回,否则回去当前对象的prototype里寻找,如果找到就返回,否则继续去当前对象的prototype的prototype里继续寻找,这个寻找链的终结是Obejct.prototype.</p>

<p>有时候我们会想创建一个不继承自任何原型的对象,它在一些场景下很实用,例如被当做hash来用.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">nakedObject</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;toString&quot;</span> <span class="k">in</span> <span class="nx">nakedObject</span><span class="p">);</span>     <span class="c1">// false</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;valueOf&quot;</span> <span class="k">in</span> <span class="nx">nakedObject</span><span class="p">);</span>      <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<p>结合上面的create方法,同时我们知道每个方法都有自己的prototype,当我们在定义一个方法时,系统为我们指定了当前方法的prototype,同时指定了prototype里constructor的指向,具体如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">YourConstructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// initialization</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// JavaScript engine does this for you behind the scenes</span>
</span><span class='line'><span class="nx">YourConstructor</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="nx">YourConstructor</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这其实是系统创建了一个Obejct.prototype的对象,然后让当前方法的prototype指向它.
下面我们来看一个复杂一些的例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="c1">// overwrite prototype property</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Rectangle</span><span class="p">(</span><span class="nx">length</span><span class="p">,</span> <span class="nx">width</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Rectangle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Rectangle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;[Rectangle &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="s2">&quot;x&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">+</span> <span class="s2">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// constructor stealing, 调用父类的构造器</span>
</span><span class='line'>    <span class="nx">Rectangle</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">size</span><span class="p">,</span> <span class="nx">size</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Rectangle</span><span class="p">();</span>
</span><span class='line'><span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Square</span><span class="p">;</span>
</span><span class='line'><span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;[Square &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="s2">&quot;x&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">+</span> <span class="s2">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">rect</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Rectangle</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">square</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Square</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">rect</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span>               <span class="c1">// 50</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span>             <span class="c1">// 36</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">rect</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>              <span class="c1">// [Rectangle 5x10]</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>            <span class="c1">// [Square 6x6]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">rect</span> <span class="k">instanceof</span> <span class="nx">Rectangle</span><span class="p">);</span>    <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">rect</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">);</span>       <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span> <span class="k">instanceof</span> <span class="nx">Square</span><span class="p">);</span>     <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span> <span class="k">instanceof</span> <span class="nx">Rectangle</span><span class="p">);</span>  <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">);</span>     <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Square的对象同时是Square, Rectangle和Object的对像,下面这张图解释了原因:
<img src="http://qiusli.github.io/images/JS_inheritance/2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中的构造器(constructor)和原型(prototype)]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/24/js-prototype/"/>
    <updated>2015-10-24T22:22:16-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/24/js-prototype</id>
    <content type="html"><![CDATA[<h2>构造器</h2>

<p>JavaScript中的构造器其实就是方法/函数,我们新建一个方法,然后使用new去创建对象,可以说这个方法就是被创建的对象的原型.如果一个方法被作为对象的原型,约定俗成它应该大写字母开头.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">sayName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Nick&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Craig&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span> <span class="k">instanceof</span>  <span class="nx">Person</span><span class="p">);</span>    <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span> <span class="k">instanceof</span>  <span class="nx">Person</span><span class="p">);</span>    <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果方法不接受参数,在使用new创建的时候可以省去括号</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(){...}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个新建的对象都有一个constructor property,它指向创建这个对象的方法.如果这个对象是使用Obejct literal或者new Object方法创建的,那么该对象的constructor指向object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">==</span> <span class="nx">Person</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">==</span> <span class="nx">Person</span><span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>在使用构造器的时候前面要加上new关键字,表示被赋值的是一个对象,否则只是简单的方法调用.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Nicholas&quot;</span><span class="p">);</span>         <span class="c1">// note: missing &quot;new&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span> <span class="k">instanceof</span> <span class="nx">Person</span><span class="p">);</span>   <span class="c1">// false</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">person1</span><span class="p">);</span>              <span class="c1">// &quot;undefined&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>                        <span class="c1">// &quot;Nicholas&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>原型</h2>

<p>在创建对象时,我们有时会有这样一个疑虑:既然一些方法处理的事情是一样的,不过接受的参数不一样,我们为什么不能让许多对象共用这些方法呢?这就是prototype的由来.</p>

<p>每个对象都有一个prototype,prototype自身也是一个对象,它也有自己的property.几乎每一个方法都有自己的prototype property,所有通过该方法创建的对象都能访问该方法的propotype.我们可以把一个对象的原型想象成它的一个模板,这个对象从它的模板原型中得到一些property,然后基于这个继续扩展.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">book</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;the principle of object oriented javascript&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;hasOwnProperty&quot;</span> <span class="k">in</span> <span class="nx">book</span><span class="p">);</span>                            <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">book</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;hasOwnProperty&quot;</span><span class="p">));</span>               <span class="c1">// false</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;hasOwnProperty&quot;</span><span class="p">));</span>   <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>每一个对象在被创建后都有自己的[[Prototype]]property,它指向创建它的方法的prototype.</p>

<p> <img src="http://qiusli.github.io/images/JS_prototype/1.png"></p>

<p>当在试图访问一个对象上得某个property时,系统会先查看当前对象是否有这个own property,如果有则返回,否则继续查找它的[[Prototype]]指向的对象(即这个对象的原型)是否有这个property,有则返回否则返回undefined.prototype property不能被复写或者删除:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>  <span class="c1">// [object Object]</span>
</span><span class='line'><span class="nx">object</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;[object Custom]&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>  <span class="c1">// [object Custom]</span>
</span><span class='line'><span class="k">delete</span> <span class="nx">object</span><span class="p">.</span><span class="nx">toString</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>  <span class="c1">// [object Object]</span>
</span><span class='line'><span class="k">delete</span> <span class="nx">object</span><span class="p">.</span><span class="nx">toString</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>  <span class="c1">// [object Object]</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码首先打印原型的toString方法,然后试图修改这个prototype的方法,第二次成功打印出修改后的值.其实它并不是修改了prototype,而是创建了自己的一个own property,这个own property和prototype中的toString有相同的函数签名.然后我们试图删除prototype里的toString方法,这只是删除了自己定义的own property,最后一次是真正尝试删除prototype里的toString方法,但是并不成功,因为它不能在对象上删除.</p>

<p> <img src="http://qiusli.github.io/images/JS_prototype/2.png"></p>

<h3>创建prototype</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">Car</span><span class="p">(</span><span class="nx">brand</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Car</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayBrand</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">car1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car</span><span class="p">(</span><span class="s2">&quot;BMW&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">car2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car</span><span class="p">(</span><span class="s2">&quot;Benz&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">car1</span><span class="p">.</span><span class="nx">sayBrand</span><span class="p">();</span>                       <span class="c1">// BMW</span>
</span><span class='line'><span class="nx">car2</span><span class="p">.</span><span class="nx">sayBrand</span><span class="p">();</span>                       <span class="c1">// Benz</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为prototype里地property是所有对象共用的,这也许会产生一些潜在问题,即一个对象对prototype做出的改变会影响到另一个对象.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;5. ------&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Car</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">manufacureLocation</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="nx">car1</span><span class="p">.</span><span class="nx">manufacureLocation</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;Chongqing&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">car2</span><span class="p">.</span><span class="nx">manufacureLocation</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;Beijing&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">car1</span><span class="p">.</span><span class="nx">manufacureLocation</span><span class="p">);</span>      <span class="c1">// [ &#39;Chongqing&#39;, &#39;Beijing&#39; ]</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">car2</span><span class="p">.</span><span class="nx">manufacureLocation</span><span class="p">);</span>      <span class="c1">// [ &#39;Chongqing&#39;, &#39;Beijing&#39; ]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>同时创建多个prototype的property</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">University</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">University</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sayName</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">toString</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;WUSTL&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样做很方便,但是它也有一个潜在的问题,即复写了方法自身的prototype.之前,在方法被创建时,它在prototype里有自己的constructor,它指向方法自身.但是在上面的University.prototype = {&hellip;}语句其实是使用Object literal方法对University方法的prototype重新赋值了,所以它的prototype里的constructor指向了新的对象的prototype,即object得prototype.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">univ</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">University</span><span class="p">(</span><span class="s2">&quot;Washington University&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">univ</span> <span class="k">instanceof</span> <span class="nx">University</span><span class="p">);</span>     <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">univ</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">==</span> <span class="nx">University</span><span class="p">);</span> <span class="c1">// false</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">univ</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">==</span> <span class="nb">Object</span><span class="p">);</span>     <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了避免这种情况的出现,我们可以显式制定方法的constructor的指向:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="c1">// solution to the above issue</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Computer</span><span class="p">(</span><span class="nx">brand</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Computer</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span><span class="o">:</span> <span class="nx">Computer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sayBrand</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;brand is &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">statePrice</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;price is quite high&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">computer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Computer</span><span class="p">(</span><span class="s2">&quot;Lenovo&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">computer</span> <span class="k">instanceof</span> <span class="nx">Computer</span><span class="p">);</span>     <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">computer</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">==</span> <span class="nx">Computer</span><span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">computer1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Computer</span><span class="p">(</span><span class="s2">&quot;Apple&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">computer2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Computer</span><span class="p">(</span><span class="s2">&quot;Dell&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Computer</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">quote</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">quote</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;quote of &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">+</span> <span class="s2">&quot; is &quot;</span> <span class="o">+</span> <span class="nx">quote</span><span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">computer1</span><span class="p">.</span><span class="nx">quote</span><span class="p">(</span><span class="s2">&quot;Think Different&quot;</span><span class="p">);</span> <span class="c1">// quote of Apple is Think Different</span>
</span><span class='line'><span class="nx">computer2</span><span class="p">.</span><span class="nx">quote</span><span class="p">(</span><span class="s2">&quot;Whatever&quot;</span><span class="p">);</span>        <span class="c1">// quote of Dell is Whatever</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中的对象]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/24/js-object/"/>
    <updated>2015-10-24T13:32:50-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/24/js-object</id>
    <content type="html"><![CDATA[<p>JavaScript中的对象较之于其他非动态语言的对象,最大的优势在于它能随时被改变.其他语言(例如Java)中一旦创建了class就不能再修改,而JavaScript创建对象只相当于创建了一个框架,后面随时可以往这个框架里添加东西.</p>

<!-- more -->


<h2>添加和设置property的原理:Put与Set</h2>

<p>当向对象中添加property时,其实是调用了对象的一个[[Put]]方法,这个方法存在于每个JavaScript对象中.当[[put]]被调用的时候,它创建的proterty是own property,即在当前环境下创建的property,不是从其他对象继承而来.对象中还有另一个[[Set]]方法,它在对象里property被重写的时候被系统调用.</p>

<h2>删除property</h2>

<p>对象在Javascript中存在的方式类似于键值对,增加property相当于add一个键值对,删除property相当于delete一个键值对.不能简单地通过把property设置为null来删除它,这样做的道理就是调用对象的[[Set]]方法来把键值对的值设置为null,但是键还在.正确的方法是使用delete方法.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">27</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;age&quot;</span> <span class="k">in</span> <span class="nx">person</span><span class="p">);</span>  <span class="c1">// true</span>
</span><span class='line'><span class="k">delete</span>  <span class="nx">person</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;age&quot;</span> <span class="k">in</span> <span class="nx">person</span><span class="p">);</span>  <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<h2>检测property是否属于当前对象</h2>

<p>新手容易犯的一个错误是使用下面这种方法来检测property是否存在于一个对象:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Kevin&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">isCitizen</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// kevin</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Javascript中的if语句判断为真的条件是value为truthy即可,truthy的范围包括对象,非空字符串,非0,true等等.所以上面的if语句会被判断为真.if语句判断为假的条件是value为falsy,falsy的范围包括null,undefined,0,false,NaN或空字符串等.</p>

<p>正确的检测方法有2种,分别是in关键字和hasOwnproperty方法.前者覆盖的范围更广,所有从Object继承下来的方法都会被用来判断为当前对象的property,而后者更严格,只在当前环境下定义的对象property才被判断为真.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">sayName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;my name is &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="s2">&quot;sayName&quot;</span> <span class="k">in</span> <span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;sayName is in person&quot;</span><span class="p">);</span>       <span class="c1">// sayName is in person</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="s2">&quot;toString&quot;</span> <span class="k">in</span> <span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;toString is in person&quot;</span><span class="p">);</span>      <span class="c1">// toString is in person</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;isCitizen&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;has own property isCitizen&quot;</span><span class="p">);</span> <span class="c1">// has own property isCitizen</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;toString&quot;</span><span class="p">))</span> <span class="p">{</span>        <span class="c1">// false</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;has own property toString&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>property的类型</h2>

<p>Javascript对象property可以分为两种,分别是Data properties和Accessor properties,前者包括简单的数据条目键值对(name: &ldquo;Qiushi&rdquo;)和值为方法的键值对(sayName: function(){&hellip;}),无论是向对象中天剑简单数据条目或者值为方法的键值对,都调用的是对象的[[Put]]方法.Accessor properties是用来读取或者写入键值对的(类似于getter和setter).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">qiushi</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Javascript中的一种convention,以下划线开始的property被当做private的,但其实还是public的</span>
</span><span class='line'>    <span class="nx">_age</span><span class="o">:</span> <span class="mi">27</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">get</span> <span class="nx">age</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;read age&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_age</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">set</span> <span class="nx">age</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;set age&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_age</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">qiushi</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>  <span class="c1">// read age 27</span>
</span><span class='line'><span class="nx">qiushi</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">28</span><span class="p">;</span>          <span class="c1">// set age</span>
</span></code></pre></td></tr></table></div></figure>


<h2>property的属性</h2>

<h3>遍历property(enumerable)</h3>

<p>可以使用for-in循环来遍历每个property:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">usa</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">state</span><span class="o">:</span> <span class="mi">55</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">population</span><span class="o">:</span> <span class="mi">320000000</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">prop</span> <span class="k">in</span> <span class="nx">usa</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// key</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;property : &quot;</span> <span class="o">+</span> <span class="nx">prop</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// value</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;property value : &quot;</span> <span class="o">+</span> <span class="nx">usa</span><span class="p">[</span><span class="nx">prop</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对象中的每一个property默认都是能被遍历的,因为每个对象中的property有一个自己内部的叫做[[enumerable]]的属性,它定义当前property是否能被遍历.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="c1">// state is enumerable : true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;state is enumerable : &quot;</span> <span class="o">+</span> <span class="nx">usa</span><span class="p">.</span><span class="nx">propertyIsEnumerable</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">));</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">usa</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;length&quot;</span> <span class="k">in</span> <span class="nx">keys</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="c1">// length is enumerable : false</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;length is enumerable : &quot;</span> <span class="o">+</span> <span class="nx">usa</span><span class="p">.</span><span class="nx">propertyIsEnumerable</span><span class="p">(</span><span class="s2">&quot;length&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>在使用literal或者constructor创建对象的时候,每一个property的[[enumerable]]属性默认为true,如果想创建不能被遍历的property,应该使用defineProperty方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Qiushi&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">propertyIsEnumerable</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">));</span>  <span class="c1">// true</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person1</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">propertyIsEnumerable</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">));</span>  <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>删除property(configurable)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="k">delete</span> <span class="nx">person1</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;name&quot;</span> <span class="k">in</span> <span class="nx">person1</span><span class="p">);</span>  <span class="c1">// true (意味着没被删除)</span>
</span><span class='line'><span class="nx">person1</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;shawnee&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>       <span class="c1">// shawnee (不能被删除但能被修改)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>修改property(writable)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person1</span><span class="p">,</span> <span class="s2">&quot;age&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="mi">27</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">writable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span> <span class="c1">// 27</span>
</span><span class='line'><span class="nx">person1</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">99</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span> <span class="c1">// 27 (值没有被修改)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Accessor properties有[[Get]]和[[Set]]两种属性,所以在定义它时可以指定其属性的行为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">_name</span><span class="o">:</span> <span class="s2">&quot;Nicholas&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person1</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Reading name&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Setting name to %s&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>读取property的属性</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person1</span><span class="p">,</span> <span class="s2">&quot;age&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="mi">27</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">writable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// retrieve property attributes</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">descriptor</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person1</span><span class="p">,</span> <span class="s2">&quot;age&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">.</span><span class="nx">enumerable</span><span class="p">);</span>                               <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">.</span><span class="nx">configurable</span><span class="p">);</span>                               <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">descriptor</span><span class="p">.</span><span class="nx">writable</span><span class="p">);</span>                                 <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<h2>防止对象被修改的方法</h2>

<p>我们在一开始就提到Javascript中的对象可以在创建后被修改,但是在一些情况下我们想防止这种情况的发生,系统提供了3中方法.</p>

<h3>extensible</h3>

<p>顾名思义,它防止对象被extend,即不能添加新property到对象,但是能修改和删除已有property的内容.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="c1">// prevent modification</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;is extensible : &quot;</span> <span class="o">+</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">person1</span><span class="p">));</span> <span class="c1">// true</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">person1</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;is extensible : &quot;</span> <span class="o">+</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">person1</span><span class="p">));</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>seal</h3>

<p>和extensible,但是不能删除已有的property.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">seal</span><span class="p">(</span><span class="nx">person1</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;is sealed : &quot;</span> <span class="o">+</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">isSealed</span><span class="p">(</span><span class="nx">person1</span><span class="p">));</span>         <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;is extensible : &quot;</span> <span class="o">+</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">isExtensible</span><span class="p">(</span><span class="nx">person1</span><span class="p">));</span> <span class="c1">// false</span>
</span><span class='line'><span class="nx">person1</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Rashmi&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>                                      <span class="c1">// Rashmi</span>
</span><span class='line'><span class="k">delete</span> <span class="nx">person1</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>                                      <span class="c1">// Rashmi (没有被删除)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>freeze</h3>

<p>和seal类似但更严厉,只能读取property</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">company</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Goldman Sachs&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">size</span><span class="o">:</span> <span class="s2">&quot;big&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">salary</span><span class="o">:</span> <span class="s2">&quot;low&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;is frozen &quot;</span> <span class="o">+</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">company</span><span class="p">));</span> <span class="c1">// is frozen false</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">company</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;is frozen &quot;</span> <span class="o">+</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">isFrozen</span><span class="p">(</span><span class="nx">company</span><span class="p">));</span> <span class="c1">// is frozen true</span>
</span><span class='line'><span class="nx">company</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;thoughtworks&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">company</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>                            <span class="c1">// Goldman Sachs</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中的函数]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/22/js-functions/"/>
    <updated>2015-10-22T19:21:12-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/22/js-functions</id>
    <content type="html"><![CDATA[<p>JavaScript中的函数即对象,它也是以键值对的形式存在,但是它内部有一个internal
property叫做[[call]],它区分了其和对象的唯一不同,定义了自身的类型是函数,可以被执行调用,而对象只能被创建使用.同时如果使用typeof来查看类型,会返回function,internal
property从外部不可达.</p>

<!-- more -->


<h4>两种定义方法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="c1">// function declaration</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// function expression</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">k</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两种定义方法基本类似,唯一的区别就是使用前者定义的方法可以在任何地方调用,因为系统总会把定义自动放到最前面(function
hoist),后者不会.</p>

<p>方法在Javascript中是一等公民,意味着你可以把它赋值给变量,把它加到方法里,作为参数传递,作为返回值等等.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="c1">// pass function as parameter</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">];</span>
</span><span class='line'><span class="nx">numbers</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">first</span> <span class="o">-</span> <span class="nx">second</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span>  <span class="c1">// [ 1, 2, 3, 4, 6, 6, 7, 8, 8 ]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>参数</h4>

<p>函数可以接受零个或多个参数,函数接受的所有参数都被存在一个叫做arguments的变量中,可以在方法内部用其取出传递进来的参数.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">sum</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>     <span class="c1">// 6</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>  <span class="c1">// 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子sum函数没有定义接受的参数个数,因为无论多少个,最终都是被存放在arguments变量里.如果定义了有限个的参数,多余的参数会被忽略.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">refect</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">refect</span><span class="p">(</span><span class="s2">&quot;hi&quot;</span><span class="p">));</span>           <span class="c1">// hi</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">refect</span><span class="p">(</span><span class="s2">&quot;hi&quot;</span><span class="p">,</span> <span class="mi">25</span><span class="p">));</span>       <span class="c1">// 25</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">refect</span><span class="p">(</span><span class="s2">&quot;hi&quot;</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span> <span class="c1">// hi</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于函数在JavaScript中等同于对象,所有函数也可以有自己的属性(property).length就是其中的一个属性,它记录了函数接受的参数个数.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">refect</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">refect</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 1</span>
</span></code></pre></td></tr></table></div></figure>


<h4>多态</h4>

<p>多态的区分是在函数签名,具体是方法名和参数的组合来区分.但是因为JavaScript函数能接受任意多的参数,所以导致不能够用参数来区分多个多态方法,所以JavaScript中没有多态一说.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">sayMessage</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">sayMessage</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Default Message&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">sayMessage</span><span class="p">(</span><span class="s2">&quot;Chelse&quot;</span><span class="p">);</span>   <span class="c1">// Default Message</span>
</span></code></pre></td></tr></table></div></figure>


<p>在JavaScript中,如果你定义了多个同名方法,那么在你调用时,系统会取最后一个方法,前面的同名方法都被shadow掉了.因为函数等同于对象,系统在解析上面的代码时,其实是完成了下面的操作:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">sayMessage</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&quot;message&quot;</span><span class="p">,</span> <span class="s2">&quot;console.log(message);&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 变量指向了另一个对象</span>
</span><span class='line'><span class="nx">sayMessage</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&quot;console.log(\&quot;Default Message chongqing\&quot;);&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">sayMessage</span><span class="p">(</span><span class="s2">&quot;chongqing&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>关键字: this</h4>

<p>JavaScript代码中每一个scope里都有一个this关键字,代表了调用当前函数的那个对象.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Qiushi&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sayName</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">sayNameForAll</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;chelse&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sayName</span><span class="o">:</span> <span class="nx">sayNameForAll</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;ruth&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sayName</span><span class="o">:</span> <span class="nx">sayNameForAll</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">// 这里的this代表person对象.</span>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">sayName</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 这里的this代表person1对象.</span>
</span><span class='line'><span class="nx">person1</span><span class="p">.</span><span class="nx">sayName</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 这里的this代表person2对象.</span>
</span><span class='line'><span class="nx">person2</span><span class="p">.</span><span class="nx">sayName</span><span class="p">();</span>
</span><span class='line'><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;shawnee&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 这里的this代表全局对象,即window,所以window.name只能是shawnee.</span>
</span><span class='line'><span class="nx">sayNameForAll</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的this指向都是隐式的,我们可以通过下面三种方法来显式制定this的指向.</p>

<h4>使用call</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">speak</span><span class="p">(</span><span class="nx">label</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">label</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">language</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">language</span><span class="o">:</span> <span class="s2">&quot;chinese&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">language</span><span class="o">:</span> <span class="s2">&quot;spanish&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">speak</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="s2">&quot;我说 &quot;</span><span class="p">);</span>     <span class="c1">// 我说 chinese</span>
</span><span class='line'><span class="nx">speak</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">p2</span><span class="p">,</span> <span class="s2">&quot;I speak &quot;</span><span class="p">);</span> <span class="c1">// I speak spanish</span>
</span></code></pre></td></tr></table></div></figure>


<p>call方法的第一个参数指定this的指向,后面为参数.</p>

<h4>使用apply</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nx">speak</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;Kevin speaks &quot;</span><span class="p">]);</span> <span class="c1">// Kevin speaks chinese</span>
</span></code></pre></td></tr></table></div></figure>


<p>apply和call的唯一区别就是接受的第二个参数的类型,call接受单个参数,而apply接受一个数组,所以如果定义的方法接受多个参数,最好使用apply,反之则使用call.</p>

<h4>使用bind</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">anotherSayName</span><span class="p">(</span><span class="nx">label</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">label</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">n1</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Ani&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">n2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Rashmi&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sayName1</span> <span class="o">=</span> <span class="nx">anotherSayName</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">n1</span><span class="p">,</span> <span class="s2">&quot;n1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">sayName1</span><span class="p">();</span>                                           <span class="c1">// n1Ani</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sayName2</span> <span class="o">=</span> <span class="nx">anotherSayName</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">n2</span><span class="p">,</span> <span class="s2">&quot;n2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">sayName2</span><span class="p">();</span>                                       <span class="c1">// n2Rashmi</span>
</span><span class='line'><span class="nx">n2</span><span class="p">.</span><span class="nx">sayName</span> <span class="o">=</span> <span class="nx">sayName1</span><span class="p">;</span>
</span><span class='line'><span class="nx">n2</span><span class="p">.</span><span class="nx">sayName</span><span class="p">();</span>                                     <span class="c1">// n1Ani</span>
</span></code></pre></td></tr></table></div></figure>


<p>值得注意的是最后输出为n1Ani而不是n2Rashmi,因为sayName1在最开始就指向了anotherSayName,this指向了n1,在重新赋值给n2的sayName时,其this指向不会被改变,所以输出n1Ani.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中的类型]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/21/js-types/"/>
    <updated>2015-10-21T20:34:58-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/21/js-types</id>
    <content type="html"><![CDATA[<p>JavaScript一共有两种类型,非别为原始类型和引用类型.JavaScript使用一个叫做variable object的东西来记录创建的数据类型,如果新建数据为原始类型,则直接存储在variable object中,如果为引用类型,则用variable object来存放指向引用类型的指针.</p>

<!-- more -->


<h2>原始类型</h2>

<p>JavaScript一共有5种原始类型:
1. Boolean
2. Number
3. String
4. Null
5. Undefined
当把一个存储原始类型数据的变量赋值给另一个变量时,两个变量存储的值一样,但分别拥有的是各自的拷贝.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">color1</span> <span class="o">=</span>  <span class="s2">&quot;red&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">color2</span> <span class="o">=</span> <span class="nx">color1</span><span class="p">;</span>
</span><span class='line'><span class="nx">color1</span> <span class="o">=</span> <span class="s2">&quot;green&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">color1</span><span class="p">);</span> <span class="c1">// green</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">color2</span><span class="p">);</span> <span class="c1">// red</span>
</span></code></pre></td></tr></table></div></figure>


<h4>typeof 关键字</h4>

<p>用来判断当前原始类型的具体类型:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="mi">10</span><span class="p">);</span>        <span class="c1">// number</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="s2">&quot;hello&quot;</span><span class="p">);</span>   <span class="c1">// string</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">true</span><span class="p">);</span>      <span class="c1">// boolean</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">null</span><span class="p">);</span>      <span class="c1">// object</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<h4>== 与 ===</h4>

<p>两者的作用基本一样,唯一的不同就是<code>==</code>在比较的时候会进行类型转换,而<code>===</code>则按原值比较.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;5&quot;</span> <span class="o">==</span> <span class="mi">5</span><span class="p">);</span>           <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;5&quot;</span> <span class="o">===</span> <span class="mi">5</span><span class="p">);</span>          <span class="c1">// false</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">==</span> <span class="s2">&quot;true&quot;</span><span class="p">);</span>     <span class="c1">// false</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">===</span> <span class="s2">&quot;true&quot;</span><span class="p">);</span>    <span class="c1">// false</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">null</span> <span class="o">==</span> <span class="kc">null</span><span class="p">);</span>       <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">null</span> <span class="o">===</span> <span class="kc">null</span><span class="p">);</span>      <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">null</span> <span class="o">==</span> <span class="kc">undefined</span><span class="p">);</span>  <span class="c1">// true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">null</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<h2>引用类型</h2>

<p>引用类型即对象,它是由一组键值对组成,很像其他语言中的hash.键可以为string或者一般的literal,值为原始类型或者方法.创建对象一般有两种方法: 使用new和使用object literal.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="mi">1</span><span class="p">.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">book</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="nx">book</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Head first Java&quot;</span>
</span><span class='line'><span class="nx">book</span><span class="p">.</span><span class="nx">year</span> <span class="o">=</span> <span class="mi">2014</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span><span class="p">.</span>
</span><span class='line'><span class="c1">// literal</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">book</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;javascript oo design&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">year</span><span class="o">:</span> <span class="mi">2014</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>与原始类型的赋值不同的是,引用类型在赋值过程中不会在内存中再次拷贝指向数据,而是仅仅创建一个新的指针指向原来的引用.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="nx">obj1</span><span class="p">;</span>
</span><span class='line'><span class="nx">obj1</span><span class="p">.</span><span class="nx">myCustomProperty</span> <span class="o">=</span> <span class="s2">&quot;Qiushi&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj2</span><span class="p">.</span><span class="nx">myCustomProperty</span><span class="p">);</span> <span class="c1">// &quot;Qiushi&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>和Java类似,JavaScript也有垃圾回收机制,也即没有指针指向对象时,其被回收.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="nx">obj</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>原始类型的包装</h3>

<p>原始类型中的String,Number和Boolean分别有其对应的包装类型,当系统检测到原始类型被读取并被当做对象使用时,系统会创建一个零时的原始类型的包装类,当包装类不再被使用的时候立即被系统回收.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Qiushi&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">firstChar</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstChar</span><span class="p">);</span>         <span class="c1">// &quot;Q&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">在系统中被解释为</span><span class="o">:</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Qiushi&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">firstChar</span> <span class="o">=</span> <span class="nx">tmp</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="nx">tmp</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstChar</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>例如如果我们按照下面这么做:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Nicholas&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">name</span><span class="p">.</span><span class="nx">last</span> <span class="o">=</span> <span class="s2">&quot;Zakas&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">.</span><span class="nx">last</span><span class="p">);</span>    <span class="c1">// undefined</span>
</span><span class='line'>
</span><span class='line'><span class="err">在系统中被解释为</span><span class="o">:</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Nicholas&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sring</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'><span class="nx">tmp</span><span class="p">.</span><span class="nx">last</span> <span class="o">=</span> <span class="s2">&quot;Zakas&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">tmp</span> <span class="o">=</span> <span class="kc">null</span>                 <span class="c1">// 零时变量被摧毁</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">.</span><span class="nx">last</span><span class="p">);</span>
</span><span class='line'><span class="nx">tmp</span> <span class="o">=</span> <span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>再看下面这个例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Qiushi&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="k">instanceof</span> <span class="nb">String</span><span class="p">)</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<p>name在这里没有被当做对象使用(obj.xxx),所以没有零时对象创立,而原始类型不是其包装类的引用,所以会返回false.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C#中的Delegate和Event]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/17/event-and-delegate-in-c-number/"/>
    <updated>2015-10-17T15:06:20-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/17/event-and-delegate-in-c-number</id>
    <content type="html"><![CDATA[<p>简单来说，deletegate就是一个指向function的指针，下面是一个其最简单的用法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">delegate</span> <span class="n">returntype</span> <span class="nf">delegateName</span><span class="p">(</span><span class="n">parameters</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>上面的代码<em>声明</em>了一个delegate，但是它并没有指向任何方法，有2种方法让delegate指向某个方法</p>

<ol>
<li>使用new创建，然后把需要指向的方法作为参数</li>
<li>直接赋值</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="m">1.</span> <span class="n">delegateName</span> <span class="n">dl1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">delegateName</span><span class="p">(</span><span class="n">someMethod</span><span class="p">);</span>
</span><span class='line'><span class="m">2.</span> <span class="n">delegateName</span> <span class="n">dl2</span> <span class="p">=</span> <span class="n">someMethod</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当完成上面2步后，delegate就指向了某个方法，然后可以直接通过delegate调用这个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">dl1</span><span class="p">(</span><span class="n">parameters</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>既然我们可以直接调用类的方法，为什么还要使用delegate？下面这个例子来说明原因：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">namespace</span> <span class="nn">Delegate_Event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Calculator</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">a</span> <span class="p">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="kt">int</span> <span class="nf">minus</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">a</span> <span class="p">-</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">delegate</span> <span class="kt">int</span> <span class="nf">dele</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span> <span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Calculator</span> <span class="n">cal</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Calculator</span> <span class="p">();</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">cal</span><span class="p">.</span><span class="k">add</span> <span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">3</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">dele</span> <span class="n">objDele</span> <span class="p">=</span> <span class="n">cal</span><span class="p">.</span><span class="k">add</span><span class="p">;</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">objDele</span> <span class="p">(</span><span class="m">11</span><span class="p">,</span> <span class="m">2</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们把MainClass想象成client，Calculator想象成server，client想要调用server端的代码，首先须奥创建客户端的对象，然后通过对象来调用。这违反了encapsulation原则，因为server端的所有东西都暴露给了client。下面我在client端添加一个delegate，然后再添加一个方法来决定delegate指向的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">namespace</span> <span class="nn">Delegate_Event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Calculator</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">delegate</span> <span class="kt">int</span> <span class="nf">CalculatorDelegate</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>      <span class="k">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">a</span> <span class="p">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="kt">int</span> <span class="nf">minus</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">a</span> <span class="p">-</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="n">CalculatorDelegate</span> <span class="nf">assignMethod</span><span class="p">(</span><span class="kt">string</span> <span class="n">methodName</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">CalculatorDelegate</span> <span class="n">delegateObj</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">methodName</span><span class="p">.</span><span class="n">Equals</span> <span class="p">(</span><span class="s">&quot;add&quot;</span><span class="p">))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">delegateObj</span> <span class="p">=</span> <span class="k">add</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">methodName</span><span class="p">.</span><span class="n">Equals</span> <span class="p">(</span><span class="s">&quot;minus&quot;</span><span class="p">))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">delegateObj</span> <span class="p">=</span> <span class="n">minus</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">return</span> <span class="n">delegateObj</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">delegate</span> <span class="kt">int</span> <span class="nf">dele</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span> <span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Calculator</span> <span class="n">cal</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Calculator</span> <span class="p">();</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">cal</span><span class="p">.</span><span class="n">assignMethod</span> <span class="p">(</span><span class="s">&quot;add&quot;</span><span class="p">).</span><span class="n">Invoke</span> <span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">22</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，如果我需要在server端做出一些改变(例如新增一个multiply方法)，我在client端所做的改变就会很少，只需修改assignMend中的参数，分离了server端和client端的耦合。</p>

<h1>Multicast Delegate</h1>

<p>如果我想要让我的代理指向多个方法，那么在执行这个代理时，所有被指向的方法都会被一一执行。语法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){...}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">minus</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){...}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">multiply</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){...}</span>
</span><span class='line'>
</span><span class='line'><span class="k">delegate</span> <span class="nf">theDele</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="n">theDele</span> <span class="p">+=</span> <span class="k">add</span><span class="p">;</span>
</span><span class='line'><span class="n">theDele</span> <span class="p">+=</span> <span class="n">minus</span><span class="p">;</span>
</span><span class='line'><span class="n">theDele</span> <span class="p">+=</span> <span class="n">multiply</span><span class="p">;</span>
</span><span class='line'><span class="n">theDele</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">20</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Multicast Delegate的应用</h1>

<p>在pubisher-subscriber的模式中使用得最多。比如我有一个server端发送信息，多个client会接受信息:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">namespace</span> <span class="nn">Delegate_Event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Publisher</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">delegate</span> <span class="k">void</span> <span class="nf">PublishMsgDelegate</span><span class="p">(</span><span class="kt">string</span> <span class="n">msg</span><span class="p">);</span>
</span><span class='line'>      <span class="k">public</span> <span class="n">PublishMsgDelegate</span> <span class="n">publishMsg</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">publish</span><span class="p">(</span><span class="kt">string</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">publishMsg</span> <span class="p">(</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SendViaEmail</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">sendMsg</span><span class="p">(</span><span class="kt">string</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">msg</span> <span class="p">+</span> <span class="s">&quot; sent via email&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SendViaSMS</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">sendMsg</span><span class="p">(</span><span class="kt">string</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">msg</span> <span class="p">+</span> <span class="s">&quot; sent via SMS&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span> <span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Publisher</span> <span class="n">pub</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Publisher</span> <span class="p">();</span>
</span><span class='line'>          <span class="n">SendViaEmail</span> <span class="n">se</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SendViaEmail</span> <span class="p">();</span>
</span><span class='line'>          <span class="n">SendViaSMS</span> <span class="n">sm</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SendViaSMS</span> <span class="p">();</span>
</span><span class='line'>          <span class="n">pub</span><span class="p">.</span><span class="n">publishMsg</span> <span class="p">+=</span> <span class="n">se</span><span class="p">.</span><span class="n">sendMsg</span><span class="p">;</span>
</span><span class='line'>          <span class="n">pub</span><span class="p">.</span><span class="n">publishMsg</span> <span class="p">+=</span> <span class="n">sm</span><span class="p">.</span><span class="n">sendMsg</span><span class="p">;</span>
</span><span class='line'>          <span class="n">pub</span><span class="p">.</span><span class="n">publish</span> <span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样只需在server端注册某个client就能给其发送消息。在这里有一个问题就是，无论我是否订阅了全部或者部分服务，我都会从所有渠道收到信息，因为server端就是这么设置的。为了解决这个问题，我们可以在SendViaMail和SMS里新增2个subscribe方法，说明是否订阅。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">class</span> <span class="nc">SendViaEmail</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">sendMsg</span><span class="p">(</span><span class="kt">string</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">msg</span> <span class="p">+</span> <span class="s">&quot; sent via email&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">subscribe</span><span class="p">(</span><span class="n">Publisher</span> <span class="n">pub</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">pub</span><span class="p">.</span><span class="n">publishMsg</span> <span class="p">+=</span> <span class="n">sendMsg</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SendViaSMS</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">sendMsg</span><span class="p">(</span><span class="kt">string</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">msg</span> <span class="p">+</span> <span class="s">&quot; sent via SMS&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">subscribe</span><span class="p">(</span><span class="n">Publisher</span> <span class="n">pub</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">pub</span><span class="p">.</span><span class="n">publishMsg</span> <span class="p">+=</span> <span class="n">sendMsg</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span> <span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Publisher</span> <span class="n">pub</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Publisher</span> <span class="p">();</span>
</span><span class='line'>          <span class="n">SendViaEmail</span> <span class="n">se</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SendViaEmail</span> <span class="p">();</span>
</span><span class='line'>          <span class="n">SendViaSMS</span> <span class="n">sm</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SendViaSMS</span> <span class="p">();</span>
</span><span class='line'>          <span class="n">se</span><span class="p">.</span><span class="n">subscribe</span> <span class="p">(</span><span class="n">pub</span><span class="p">);</span>
</span><span class='line'><span class="c1">//           sm.subscribe (pub);</span>
</span><span class='line'>          <span class="n">pub</span><span class="p">.</span><span class="n">publish</span> <span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的改变给了我们更多的灵活性，即可以选择订阅。但是上面的方案也会有问题，它暴露了server端给client端，client端通过server端的delegate订阅，同时client端也能修改server端的delegate。比如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">subscribe</span><span class="p">(</span><span class="n">Publisher</span> <span class="n">pub</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">pub</span><span class="p">.</span><span class="n">publishMsg</span> <span class="p">+=</span> <span class="n">sendMsg</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pub</span><span class="p">.</span><span class="n">publishMsg</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它把server端的delegate所指向的方法全部给抹去了，这样所有client的所有订阅都全部失效。为了解决这个问题，event被引入了进来。</p>

<h1>Event</h1>

<p>Event的概念就是在client和server之间添加一个layer，让client不能随意改变server端的delegate指向，也不能在client端直接invoke。用event重写上面的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">namespace</span> <span class="nn">Delegate_Event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Publisher</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">delegate</span> <span class="k">void</span> <span class="nf">PublishMsgDelegate</span><span class="p">(</span><span class="kt">string</span> <span class="n">msg</span><span class="p">);</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">event</span> <span class="n">PublishMsgDelegate</span> <span class="n">messageEvent</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">publish</span><span class="p">(</span><span class="kt">string</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">messageEvent</span> <span class="p">(</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SendViaEmail</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">sendMsg</span><span class="p">(</span><span class="kt">string</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">msg</span> <span class="p">+</span> <span class="s">&quot; sent via email&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">subscribe</span><span class="p">(</span><span class="n">Publisher</span> <span class="n">pub</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">pub</span><span class="p">.</span><span class="n">messageEvent</span> <span class="p">+=</span> <span class="n">sendMsg</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SendViaSMS</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">sendMsg</span><span class="p">(</span><span class="kt">string</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="n">msg</span> <span class="p">+</span> <span class="s">&quot; sent via SMS&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">subscribe</span><span class="p">(</span><span class="n">Publisher</span> <span class="n">pub</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">pub</span><span class="p">.</span><span class="n">messageEvent</span> <span class="p">+=</span> <span class="n">sendMsg</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span> <span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Publisher</span> <span class="n">pub</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Publisher</span> <span class="p">();</span>
</span><span class='line'>          <span class="n">SendViaEmail</span> <span class="n">se</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SendViaEmail</span> <span class="p">();</span>
</span><span class='line'>          <span class="n">SendViaSMS</span> <span class="n">sm</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SendViaSMS</span> <span class="p">();</span>
</span><span class='line'>          <span class="n">se</span><span class="p">.</span><span class="n">subscribe</span> <span class="p">(</span><span class="n">pub</span><span class="p">);</span>
</span><span class='line'>          <span class="n">sm</span><span class="p">.</span><span class="n">subscribe</span> <span class="p">(</span><span class="n">pub</span><span class="p">);</span>
</span><span class='line'>          <span class="n">pub</span><span class="p">.</span><span class="n">publish</span> <span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果驶入在SendViaEmail和SendViaSMS中调用和修改event，系统会报错。简而言之，在client端能对event所做的只能是添加或则删除操作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用Octopress写博客]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/17/how-to-blog-with-octopress/"/>
    <updated>2015-10-17T03:12:48-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/17/how-to-blog-with-octopress</id>
    <content type="html"><![CDATA[<p>具体的步骤是按照<a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">这个地址</a>来的。配置什么的都在里面，这里简单说说配置完成后到写博客的步骤</p>

<ol>
<li>rake new_post[&lsquo;blog title&rsquo;]创建新的文章</li>
<li>完成编辑后运行rake generate</li>
<li>然后rake preview在本地查看效果(<a href="http://localhost:4000/">http://localhost:4000/</a>)</li>
<li>rake deploy到github上</li>
<li>git add . 来把本地文件并入git管理</li>
<li>git commit －m ‘whatever’</li>
<li>git push origin source</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring MVC学习笔记]]></title>
    <link href="http://qiusli.github.io/blog/2015/10/15/spring-mvc/"/>
    <updated>2015-10-15T16:55:12-06:00</updated>
    <id>http://qiusli.github.io/blog/2015/10/15/spring-mvc</id>
    <content type="html"><![CDATA[<p>学习Spring很长时间了，但是一直也没有认真地总结一次，总是陷入学习了忘记的怪圈（其实也不是怪圈，就是学习了没有总结）。 今天我就写一点东西来总结我的Spring MVC学习之旅。 这个得从我的Sponsor给我布置的家庭作业讲起，在这里面我学会了很多Spring的知识。</p>

<p>可以假设Spring是一个大的容器，里面放着各种各样的网页、文件等以供一个个的request访问。所以，我想从web.xml的配置说起。</p>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;listener&gt;</span>
</span><span class='line'>    <span class="nt">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/listener&gt;</span>
</span><span class='line'><span class="nt">&lt;context-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-value&gt;</span>classpath:applicationContext-servlet.xml
</span><span class='line'>        classpath:applicationContextDataSource.xml
</span><span class='line'>    <span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'><span class="nt">&lt;/context-param&gt;</span>
</span><span class='line'><span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-name&gt;</span>bankingSystem2<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
</span><span class='line'><span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'><span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-name&gt;</span>bankingSystem2<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url-pattern&gt;</span>/<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'><span class="nt">&lt;/servlet-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的配置的意思是：servlet-mapping配置了需要被捕获的请求，url-pattern是匹配request中跟的那个地址，例如’/abc’。这里只是一个斜杠，意思是捕获所有的请求，捕获这个请求的servlet名字叫bankingSystem2。 在捕获一个请求后，Spring会根据servlet-name中的名字在这个xml中找到匹配的一个servlet，然后servlet-class是这个servlet文件的所在地。这里的DispatcherServlet是Spring的类，所有发往由Spring 容器管理的资源的请求都由它统一收集，然后它会求助Spring中内置的HandlerMapping已决定该请求被哪个controller处理。最后根据不同的请求目的地再转发给不同的controller，这个后面会讲到。这里有一点值得注意，我们在web.xml中定义了一个名字叫bankingSystem2的servlet，那么就需要在同一个文件夹下面定义一个名叫bankingSystem2-servlet.xml这样一个配置文Spring会默认到里面去读取配置和加载bean，如果没有会报错。</p>

<p>ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。 在上面的contextConfigLocation里面配置了想要在Spring容器启动的时候加载的bean。 看完了上述的web.xml，我们进入在那个配置文件中配置的applicationContext-servlet.xml中一探究竟。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&quot;bank.icbc.controller&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&quot;bank.icbc.domain&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;mvc:annotation-driven/&gt;</span>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;prefix&quot;</span> <span class="na">value=</span><span class="s">&quot;/WEB-INF/jsp/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;suffix&quot;</span> <span class="na">value=</span><span class="s">&quot;.jsp&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
首先，在这个xml配置文件中定义了一个bean，里面存放着一个resolver，他是Spring中负责显示页面的。即controller处理完一个request后，会返回一个string告诉Spring现在该显示哪个页面了，然后Spring就找到InternalResourceViewResolver，让它告诉该到哪去找到相应的页面来显示。例如，如果一个controller返回字符串abc，那么根据上面的配置，在/WEB-INF/jsp/abc.jsp这个页面就应该被显示。 上面还有一个context:component-scan，它的作用是‘扫描’相应的package，把这些package中的所有类纳入Spring的管理范围来，这样的好处是，如果相应包中有autowire bean中的类，只有主类在Spring的管理范围， 被引用的bean才能被成功地autowire。</p>

<p>同时，有些类（例如服务类）会在类上面表示诸如@Service这样的annotation，它被扫描到后，也会被Spring纳入到管理，这样其他类也能autowire它了。 annotation-driven：表示支持annotation，不写的话所有的annotation注解都无效。</p>

<p>在说完配置后，我们来模拟一个请求，来看看Spring在这个过程中的运行过程。首先，我们来到系统的初始页面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>Welcome to the Banking System! <span class="nt">&lt;br/&gt;</span>  <span class="nt">&lt;c:url</span> <span class="na">value=</span><span class="s">&quot;/addCustomer&quot;</span> <span class="na">var=</span><span class="s">&quot;addCustomer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>1. <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;${addCustomer}&quot;</span><span class="nt">&gt;</span>add Customer<span class="nt">&lt;/a&gt;</span>  <span class="nt">&lt;c:url</span> <span class="na">value=</span><span class="s">&quot;/withdraw&quot;</span> <span class="na">var=</span><span class="s">&quot;withdraw&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>2. <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;${withdraw}&quot;</span><span class="nt">&gt;</span>withdraw<span class="nt">&lt;/a&gt;</span>  <span class="nt">&lt;c:url</span> <span class="na">value=</span><span class="s">&quot;/deposit&quot;</span> <span class="na">var=</span><span class="s">&quot;deposit&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>3. <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;${deposit}&quot;</span><span class="nt">&gt;</span>deposit<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
在这个页面中，我们定义了3个URL，请求的地址分别是/addCustomer, /withdraw和/deposit。这时就需要有相应的controller来捕获对这些地址的请求，请看下面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Controllerpublic</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">CustomerController</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">&quot;bank&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Bank</span> <span class="n">bank</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">&quot;customer&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Customer</span> <span class="n">customer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/addCustomer&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">addCustomer</span><span class="o">(</span><span class="nd">@ModelAttribute</span> <span class="n">Customer</span> <span class="n">customer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;AddCustomer&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/addCustomer&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">saveCustomer</span><span class="o">(</span><span class="nd">@ModelAttribute</span> <span class="n">Customer</span> <span class="n">customer</span><span class="o">,</span> <span class="n">ModelMap</span> <span class="n">modelMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">bank</span><span class="o">.</span><span class="na">addCustomer</span><span class="o">(</span><span class="n">customer</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Customer</span> <span class="n">theCustomer</span> <span class="o">=</span> <span class="n">bank</span><span class="o">.</span><span class="na">getCustomer</span><span class="o">(</span><span class="n">customer</span><span class="o">.</span><span class="na">getNickname</span><span class="o">());</span>
</span><span class='line'>        <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;nickname&quot;</span><span class="o">,</span> <span class="n">theCustomer</span><span class="o">.</span><span class="na">getNickname</span><span class="o">());</span>
</span><span class='line'>        <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;dateOfBirth&quot;</span><span class="o">,</span> <span class="n">theCustomer</span><span class="o">.</span><span class="na">getDateOfBirth</span><span class="o">());</span>
</span><span class='line'>        <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;emailAddress&quot;</span><span class="o">,</span> <span class="n">theCustomer</span><span class="o">.</span><span class="na">getEmailAddress</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;ShowCustomer&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/openAccount&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">openAccount</span><span class="o">(</span><span class="nd">@ModelAttribute</span> <span class="n">Account</span> <span class="n">account</span><span class="o">,</span> <span class="n">ModelMap</span> <span class="n">modelMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">bank</span><span class="o">.</span><span class="na">addAccount</span><span class="o">(</span><span class="n">customer</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Account</span> <span class="n">account1</span> <span class="o">=</span> <span class="n">bank</span><span class="o">.</span><span class="na">getAccount</span><span class="o">(</span><span class="n">customer</span><span class="o">.</span><span class="na">getNickname</span><span class="o">());</span>
</span><span class='line'>        <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;nickname&quot;</span><span class="o">,</span> <span class="n">account1</span><span class="o">.</span><span class="na">getBalance</span><span class="o">());</span>
</span><span class='line'>        <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;balance&quot;</span><span class="o">,</span> <span class="n">account1</span><span class="o">.</span><span class="na">getBalance</span><span class="o">());</span>
</span><span class='line'>        <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;joinDate&quot;</span><span class="o">,</span> <span class="n">account1</span><span class="o">.</span><span class="na">getJoinDate</span><span class="o">());</span>
</span><span class='line'>        <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;isPremium&quot;</span><span class="o">,</span> <span class="n">account1</span><span class="o">.</span><span class="na">isPremium</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;ShowAccount&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/withdraw&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">goToWithdrawPage</span><span class="o">(</span><span class="nd">@ModelAttribute</span> <span class="n">Customer</span> <span class="n">customer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Withdraw&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/deposit&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">goToDepositPage</span><span class="o">(</span><span class="nd">@ModelAttribute</span> <span class="n">Customer</span> <span class="n">customer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Deposit&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/deposit&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">deposit</span><span class="o">(</span><span class="kd">final</span> <span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">ModelMap</span> <span class="n">modelMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">nickname</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&quot;nickname&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Account</span> <span class="n">account</span> <span class="o">=</span> <span class="n">bank</span><span class="o">.</span><span class="na">getAccount</span><span class="o">(</span><span class="n">nickname</span><span class="o">);</span>
</span><span class='line'>        <span class="n">account</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&quot;balance&quot;</span><span class="o">)),</span> <span class="n">nickname</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Account</span> <span class="n">account1</span> <span class="o">=</span> <span class="n">bank</span><span class="o">.</span><span class="na">getAccount</span><span class="o">(</span><span class="n">nickname</span><span class="o">);</span>
</span><span class='line'>        <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;balance&quot;</span><span class="o">,</span> <span class="n">account1</span><span class="o">.</span><span class="na">getBalance</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;ShowBalance&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/withdraw&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">withdraw</span><span class="o">(</span><span class="kd">final</span> <span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">ModelMap</span> <span class="n">modelMap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">nickname</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&quot;nickname&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Account</span> <span class="n">account</span> <span class="o">=</span> <span class="n">bank</span><span class="o">.</span><span class="na">getAccount</span><span class="o">(</span><span class="n">nickname</span><span class="o">);</span>
</span><span class='line'>        <span class="n">account</span><span class="o">.</span><span class="na">withdraw</span><span class="o">(</span><span class="n">account</span><span class="o">.</span><span class="na">getBalance</span><span class="o">(),</span> <span class="n">nickname</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Account</span> <span class="n">account1</span> <span class="o">=</span> <span class="n">bank</span><span class="o">.</span><span class="na">getAccount</span><span class="o">(</span><span class="n">nickname</span><span class="o">);</span>
</span><span class='line'>        <span class="n">modelMap</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;balance&quot;</span><span class="o">,</span> <span class="n">account1</span><span class="o">.</span><span class="na">getBalance</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;ShowBalance&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/welcome&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">backToWelcomePage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Welcome&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">handleException</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Exception&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个类是一个controller（因为被标注了@Controller 这个注解）。然后，它会捕获上面那个jsp页面发出来的请求，而具体哪个方法捕获对哪一个URL的请求，请看具体方法上面标示的@RequestMapping 注解。它规定了handle的请求的类型和URL。在处理请求的controller方法的签名中，我们看到request和modelmap。它们都被Spring容器管理，所以直接在方法参数中加进来就能直接使用它们了。ModelMap 的左右是存放一些值，用于JSP页面显示。</p>

<p>这就是一次大致的Spring MVC 例子的讲解。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 3 (Branching)]]></title>
    <link href="http://qiusli.github.io/blog/2014/05/31/git-3/"/>
    <updated>2014-05-31T19:26:00-06:00</updated>
    <id>http://qiusli.github.io/blog/2014/05/31/git-3</id>
    <content type="html"><![CDATA[<h2>What is Git Branch</h2>

<p><code>分支的好处</code>: 它允许在不干扰主分支的情况下,从主分支里分离出一条小的分支,在里面进行开发,然后再把修改合并到主分支里.</p>

<p><code>什么是分支</code>: 在Git下提交时,Git会保存每一次提交的快照,并且会保存一个指向祖先的指针.第一次提交时没有祖先,普通提交有一个祖先,由两个或多个分支合并而成的提交则有多个祖先.</p>

<!-- more -->


<p> <img src="http://qiusli.github.io/images/git-3_1.png"></p>

<p>Git中的分支其实只是一个指针,最初的时候它指向master.当你在master上不断提交时,这个指针会随之向后移动,所以它总是指向最近的一次提交.</p>

<p> <img src="http://qiusli.github.io/images/git-3_2.png"></p>

<p>当创建一个新的branch时,git会新建一个指针指向这个新建立的branch.比如说你新建了一个名为testing的branch:</p>

<p> <img src="http://qiusli.github.io/images/git-3_3.png"></p>

<p>当这个branch被创建后,并不会立即切换到这个分支上去,如果想要切换到新建的分支,可以执行:</p>

<p><code>git checkout testing</code></p>

<p>如果想在创建分支的时候同时切换到那条分支上去,可以执行:</p>

<p><code>git checkout -b testing</code></p>

<p>现在就在testing分支上了,接下来的所有操作都会在这个分支上进行,不会干扰到master分支.那么git又是如何知道用户现在到底在哪个分支上呢?原来git保存了另一个名叫<code>HEAD</code>的指针,它总是指向用户所在的当前分支,并且会随着用户执行<code>git checkout</code>指令后指向另一个分支:</p>

<p> <img src="http://qiusli.github.io/images/git-3_4.png"></p>

<h2>Basic Branching and Merging</h2>

<p>试想这样一个场景:为了完成当前工作,你在master上新建了一个分支(iss53)并且切换到上面,然后开始在新的分支上工作,并且进行了一些提交,这时你的老板分配给你一项紧急的任务,让你停掉当前的工作,立马开始新任务.这个时候你需要首先需要切换到master分支上,然后新建另一个分支(hotfix)来处理紧急任务.在修改完成并通过所有测试后,紧急任务总算是完成了,你开心地提交了这个任务.这个时候git里的情况如下:</p>

<p> <img src="http://qiusli.github.io/images/git-3_5.png"></p>

<p>这时,应该合并master和紧急任务的分支了,你需要执行下面一系列代码来完成这个操作:</p>

<ul>
<li>切换到master分支: <code>git checkout master</code></li>
<li>合并master和hotfix分支: <code>git merge hotfix</code></li>
</ul>


<p>由于master分支所在的commit是hotfix分支所在commit的直接上游,只需要向右一直移动指针就行了,这种合并方式叫做快进(<code>fast forward</code>).</p>

<p> <img src="http://qiusli.github.io/images/git-3_6.png"></p>

<p>因为hotfix分支使用来修理紧急任务的,这时任务也完成了,可以删除这个分支.</p>

<p><code>git branch -d hotfix</code></p>

<p>接下来需要回到最初工作的分支上去:</p>

<p><code>git checkout iss53</code></p>

<p>经过一些提交后:</p>

<p> <img src="http://qiusli.github.io/images/git-3_7.png"></p>

<h2>Basic Merging</h2>

<p>Merge分两步:</p>

<ul>
<li>checkout到你想要merge进去的branch(e.g. iss53 to master)</li>
<li>运行merge</li>
</ul>


<p>iss53 merge到master和hotfix merge到master是不同的.后者只需要fast forward就行了,但是前者需要进行一次称为3-way-merge的操作,具体是需要合并3个东西: 两个commit的共同父节点和两个节点本身.</p>

<p> <img src="http://qiusli.github.io/images/git-3_8.png"></p>

<p>找到需要合并的节点后再合并:</p>

<p> <img src="http://qiusli.github.io/images/git-3_9.png"></p>

<h3>Basic Merge Conflict</h3>

<p>如果两个需要被merge的节点里面有冲突(e.g. 同时修改了同一个文件的相同部分),git会提示有冲突.</p>

<p> <img src="http://qiusli.github.io/images/git-3_10.png"></p>

<p>上图的HEAD部分是当前分支在这一部分的修改,iss53的那部分是在iss53那个分支上对这一部分的修改,如果想要解决这个冲突,可以保留其中的一个,或者全部删掉重写.在解决后需要重新add这个文件.</p>

<h2>Branch Management</h2>

<p><code>git branch</code>: 列出当前的所有分支,当前分支前面会有一个星号(*).</p>

<p><code>git branch -v</code>: 列出所有分支的最近的一次提交.</p>

<h2>Remote Branches</h2>

<p>远程分支是对远程仓库状态的索引,它告诉你自从上一次和服务器交互之后的状态.当从服务器上clone项目的时候,git会创建两个指针,一个是指向服务器的指针(origin/master),并且停留在你最近一次与之交互后的节点上,另一个指针(master)指向同一个节点,不过它是在本地.两个指针最大的不同就是指向服务器上的指针只会在你与服务器进行交互的时候移动(e.g. 提交),它是自动移动的,不能人为控制,可以想象成一个书签,帮你保存上一次的状态.本地的指针是在本地提交的时候移动的.</p>

<p><img src="http://qiusli.github.io/images/git-3_11.png"></p>

<p>例如我在本地进行了一些提交,同时有人往服务器上提交了代码,这时服务器上的那个指针就会向前移动,如果我想从服务器上获取这些更新,可以运行<code>git fetch origin</code>,这个指令用来获取最新的代码,但是它不会自动merge,如果想要获取并且让系统自动merge,需要执行<code>git pull</code>.运行之后系统的现状:</p>

<p><img src="http://qiusli.github.io/images/git-3_12.png"></p>

<h2>Push</h2>

<p><code>git push (remote) (branch)</code>: 这条指令用来向服务器上推送代码.(e.g. git push origin master) 向名为origin的服务器上的master分支推送代码.</p>

<h2>Tracking Branches</h2>

<p>当我们在push或者pull的时候,git知道应该push到哪里去或者从哪里去pull,即使我们不加任何的参数.这是因为git在我们clone代码的时候建立了一个tracking branch,它和远程仓库有直接联系.</p>

<h2>Rebasing</h2>

<p>rebase是git中另一种合并分支的方法,与merge不同的是,rebase不需要进行3-way-merge,取而代之的是只需要把需要合并的分支的patch打到另一个分支上去就可以了.</p>

<p><img src="http://qiusli.github.io/images/git-3_13.png"></p>

<ul>
<li>git checkout experiment</li>
<li>git rebase master</li>
</ul>


<p>他的原理是回到两个分支的共同的祖先,提取你所在分支每次提交时产生的差异(diff),把这些差异保存在临时文件里,然后切换到需要合并到的分支,以此应用每一个patch文件.</p>

<p><img src="http://qiusli.github.io/images/git-3_14.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TG Day 3]]></title>
    <link href="http://qiusli.github.io/blog/2014/05/23/tg-day-3/"/>
    <updated>2014-05-23T00:17:00-06:00</updated>
    <id>http://qiusli.github.io/blog/2014/05/23/tg-day-3</id>
    <content type="html"><![CDATA[<p>唉,今天过得不爽,因为效率太低了.睡少了,晚上大概只睡了6个小时,导致中午在听Brian讲课的时候都反应不过来.下午想把RabbitMQ看完,但是效率也不高,拖拖拉拉也没看出个明白.</p>

<p>睡眠太重要啦!!!!</p>

<!-- more -->


<p>晚上回到家也是拖拖拉拉的,一会浏览下网页,一会看手机,时间就这样过去,这是拖延症,得治!!!!</p>

<p>明天的计划:</p>

<ul>
<li>总结这几天学到的知识和架构</li>
</ul>


<p>现在的计划: 做俯卧撑 &ndash;> 睡觉!!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TG Day 2]]></title>
    <link href="http://qiusli.github.io/blog/2014/05/21/tg-day-2/"/>
    <updated>2014-05-21T23:46:00-06:00</updated>
    <id>http://qiusli.github.io/blog/2014/05/21/tg-day-2</id>
    <content type="html"><![CDATA[<p>首先检查昨天提出的改进是否做好了,</p>

<ul>
<li>多和同事交流: 这个做得还行,比第一天好多了,主动去找了Kate和Pablo pair,熟悉了项目的开发流程.</li>
<li>专心做事:这个做得也还可以,在做事的时候没有太多的分心,只是Stemle在讲解business的时候由于前晚没睡好,导致分心了没有听进去.</li>
<li>搞清楚terminologies,搞懂项目架构:前者感觉做到80%,后者没有太多的时间搞.项目架构是个大活,得一天一天搞.</li>
</ul>


<!-- more -->


<p>今天的challenge遇到的不多.主要就是找了Kate和Pablo去pair,其实我也并不是真正想去学什么东西,而是去了解开发流程,开发难度.</p>

<p>上面提到了在stemle讲解的时候有分心,导致没听懂,问题有2:</p>

<ul>
<li>睡眠分配不足,晚上不想睡,白天不想起.一个良好的睡眠能保证一天的效率,效率好了学东西就快,所以现在晚上一定要在1点之前睡觉.</li>
<li>缺乏提问的勇气.这个是瑶瑶以前在TW反馈给我的,我一直记着.为什么呢?还是怕别人觉得你笨了,太在乎别人的看法.但是奇怪的是,有时自己很主动去问,但是还是没听懂,这是一种愚勇,提问题之前没有做出充分的准备,有些问题一出口就觉得自己应该能想出来,或者是为了提问而提问.找到这两者的折中点是解决问题的关键.</li>
</ul>


<p>明天改进的地方:</p>

<ul>
<li>多问问题,不懂就问,但是要在自己不懂的情况下,并且做好了前提工作.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TG Day 1]]></title>
    <link href="http://qiusli.github.io/blog/2014/05/20/tg-day-1/"/>
    <updated>2014-05-20T23:15:00-06:00</updated>
    <id>http://qiusli.github.io/blog/2014/05/20/tg-day-1</id>
    <content type="html"><![CDATA[<p>今天是暑期实习的第一天,平时都睡太晚了,昨晚一直睡不着,幸好今天事也不多,没有太多地表现出来.</p>

<p>上午平平淡淡地被溜了一圈分别各自介绍,拿到了电脑,填写了一堆文件.之后带我的人就开始给我灌输一些项目里面用到的知识,东西太多,有点overwhelmed的感觉.但好的是我吸取了在TW的教训,干什么事都拿个小本子遇到重点就记下来,以后也可以照着复习.</p>

<!-- more -->


<p>中午去吃了印度菜,勾起了在班加罗尔的辛酸回忆.吃饭的时候同事都在聊着,但感觉自己插不上话,听力和口语不好是一方面,另一方面自己也不善言辞,说着说着就没话了.会不会让人感觉太酷?</p>

<p>下午开始上scrum的培训课程,认真听了,里面的术语也算了解得差不多了.其实我应该更主动地去找办公室另外两个人多看看别人是怎么写代码的,可以熟悉code base,也不至于让人感觉你这人不好接触,</p>

<p>另外有一点我自己感觉比较shame,为什么我老想着回家呢?为什么到了5点半就不想待下去,为什么周围没人了心里就毛躁了?说穿了就是不够投入,心没有静下来.做东西的时候杂念太多了,对自己不够狠.</p>

<p>最后就是一定要在下班的时候列出当天遇到的不懂的地方,然后晚上回家学习.可以列在一个小本子上,搞懂一个就划掉一个.</p>

<p>今天就写到这里,下面是在今天的基础上明天需要改进的地方:</p>

<ul>
<li>多和同事交流</li>
<li>做事更加专心,不要一到时间就毛躁,想回家.</li>
<li>能完全搞明白项目和公司里面的terminology,熟悉项目架构.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 2]]></title>
    <link href="http://qiusli.github.io/blog/2014/05/18/linux2/"/>
    <updated>2014-05-18T12:32:00-06:00</updated>
    <id>http://qiusli.github.io/blog/2014/05/18/linux2</id>
    <content type="html"><![CDATA[<h2>Manipulating files and directories</h2>

<p>在操作文件的时候,通常都需要首先根据一定的条件来选择想要的文件(比如说以数字结尾的文件或者扩展名为xls的文件).这时我们需要使用通配符,它使用一定的规则帮助快速找到想要的文件.</p>

<!-- more -->


<p> <img src="http://qiusli.github.io/images/linux-2_1.png"></p>

<p>下面是一些通配符的例子:</p>

<p> <img src="http://qiusli.github.io/images/linux-2_2.png"></p>

<p><code>mkdir</code>: 创建新的目录.</p>

<p>#</p>

<p>mkdir dir_name</p>

<p>同时创建多个目录: mkdir dir1 dir2 dir3.</p>

<p><code>cp</code>: 从一个目录拷贝文件到另一个目录.</p>

<p> <img src="http://qiusli.github.io/images/linux-2_3.png"></p>

<p> <img src="http://qiusli.github.io/images/linux-2_4.png"></p>

<p><code>mv</code>: 移动文件或者修改文件名.不论是在那种情况下使用,原始的文件都不存在了,这是和<code>cp</code>最大的不同,可以想象成剪切.</p>

<p><img src="http://qiusli.github.io/images/linux-2_5.png"></p>

<p><code>rm</code>: 删除文件或者目录.删除后的文件或目录不能undelete.</p>

<p><img src="http://qiusli.github.io/images/linux-2_6.png"></p>

<p><img src="http://qiusli.github.io/images/linux-2_7.png"></p>

<h3>Hard Links vs. Soft(Symbolic) Links</h3>

<p><code>文件储存</code>: linux系统中文件存储在硬盘上,硬盘的最小存储单位叫做扇区(sector),每个扇区存储512个字节(0.5kb).操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个"块"（block）。这种由多个扇区组成的"块"，是文件存取的最小单位。"块"的大小，最常见的是4KB，即连续八个 sector组成一个 block.</p>

<p><code>inode</code>: 文件数据都储存在"块"中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为"索引节点"(index node)。存储linux系统中文件的元信息.每个文件都有一个inode.linux系统中的文件没有文件名,不同的文件是通过inode号来区分.虽然在使用linux的时候会看到文件名,但它只是一个inode的别称.比如用户在通过文件名点击文件的时候,系统首先通过文件名找到对应的inode号,然后再找到inode.最后通过inode找到文件储存的相应block,然后提取文件.</p>

<p><code>Hard Link</code>: 一般情况下，文件名和inode号码是"一一对应"关系，每个inode号码对应一个文件名。但是，Unix/Linux系统允许，多个文件名指向同一个inode号码。
这意味着，可以用不同的文件名访问同样的内容；对文件内容进行修改，会影响到所有文件名；但是，删除一个文件名，不影响另一个文件名的访问。这种情况就被称为"硬链接".(hard link)</p>

<p><code>ln file link</code>: 用来创建Hard link. file是源文件,link是目标文件.</p>

<p><img src="http://qiusli.github.io/images/linux-2_8.png"></p>

<p>运行上面这条命令以后，源文件与目标文件的inode号码相同，都指向同一个inode。inode信息中有一项叫做"链接数"，记录指向该inode的文件名总数，这时就会增加1。
反过来，删除一个文件名，就会使得inode节点中的"链接数"减1。当这个值减到0，表明没有文件名指向这个inode，系统就会回收这个inode号码，以及其所对应block区域。
这里顺便说一下目录文件的"链接数"。创建目录时，默认会生成两个目录项：".&ldquo;和&rdquo;..&ldquo;。前者的inode号码就是当前目录的inode号码，等同于当前目录的"硬链接"；后者的inode号码就是当前目录的父目录的inode号码，等同于父目录的"硬链接"。所以，任何一个目录的"硬链接"总数，总是等于2加上它的子目录总数（含隐藏目录）。</p>

<p><code>Soft(Symbolic) Link</code>: 除了硬链接以外，还有一种特殊情况。文件A和文件B的inode号码虽然不一样，但是文件A的内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B。因此，无论打开哪一个文件，最终读取的都是文件B。这时，文件A就称为文件B的"软链接"（soft link）或者"符号链接（symbolic link）。这意味着，文件A依赖于文件B而存在，如果删除了文件B，打开文件A就会报错："No such file or directory"。这是软链接与硬链接最大的不同：文件A指向文件B的文件名，而不是文件B的inode号码，文件B的inode"链接数"不会因此发生变化。ln -s命令可以创建软链接。</p>

<p><code>ln -s item link</code>: 用来创建soft link.</p>

<p><img src="http://qiusli.github.io/images/linux-2_9.png"></p>

<p><code>inode的特殊作用</code>:
由于inode号码与文件名分离，这种机制导致了一些Unix/Linux系统特有的现象。</p>

<ul>
<li>有时，文件名包含特殊字符，无法正常删除。这时，直接删除inode节点，就能起到删除文件的作用。</li>
<li>移动文件或重命名文件，只是改变文件名，不影响inode号码。</li>
<li>打开一个文件以后，系统就以inode号码来识别这个文件，不再考虑文件名。因此，通常来说，系统无法从inode号码得知文件名。</li>
</ul>


<p>第3点使得软件更新变得简单，可以在不关闭软件的情况下进行更新，不需要重启。因为系统通过inode号码，识别运行中的文件，不通过文件名。更新的时候，新版文件以同样的文件名，生成一个新的inode，不会影响到运行中的文件。等到下一次运行这个软件的时候，文件名就自动指向新版文件，旧版文件的inode则被回收。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 1]]></title>
    <link href="http://qiusli.github.io/blog/2014/05/18/linux1/"/>
    <updated>2014-05-18T11:36:00-06:00</updated>
    <id>http://qiusli.github.io/blog/2014/05/18/linux1</id>
    <content type="html"><![CDATA[<h1>INTRODUCTION</h1>

<h2>What is the Shell</h2>

<p>Shell是一个应用程序,它接受用户的键盘输入,然后把这些输入传入到操作系统并返回结果.</p>

<h2>What is the Bash</h2>

<p>几乎所有的Linux Distribution都提供一个叫做<code>bash</code>的shell应用程序,bash是GNU项目的产物.<code>bash</code>的全称是<code>Bourne Again Shell</code>,从名称上就能看出它是一般Shell(<code>sh</code>)的加强版本.最早期的Shell是由Steve Bourne编写.</p>

<!-- more -->


<h2>Terminal Emulators</h2>

<p>当使用图形用户界面的时候,我们需要另一个程序来与Shell交互,这就是Terminal Emulator.比如在Mac下的iTerm就是一个Terminal.</p>

<h2>Some simple commands</h2>

<p><code>date</code>: 显示当前时间.</p>

<p> <img src="http://qiusli.github.io/images/linux-1_1.png"></p>

<p><code>cal</code>: 显示这个月的日历.</p>

<p> <img src="http://qiusli.github.io/images/linux-1_2.png"></p>

<p><code>exit</code>: 退出当前session,相当于点击关闭.</p>

<h1>NAVIGATION</h1>

<p><code>pwd</code>: 显示当前工作目录.</p>

<p> <img src="http://qiusli.github.io/images/linux-1_3.png"></p>

<p><code>cd</code>: 改变目录.</p>

<ul>
<li>通过绝对路径直接进入另一个目录</li>
</ul>


<p> <img src="http://qiusli.github.io/images/linux-1_5.png"></p>

<ul>
<li>通过相对目录进入另一个目录</li>
</ul>


<p> <img src="http://qiusli.github.io/images/linux-1_6.png"></p>

<p> <img src="http://qiusli.github.io/images/linux-1_7.png"></p>

<p><code>ls</code>: 列出当前目录下的所有内容.</p>

<p> <img src="http://qiusli.github.io/images/linux-1_4.png"></p>

<p>显示另一个目录下的所有文件;</p>

<p> <img src="http://qiusli.github.io/images/linux-1_8.png"></p>

<p>同时显示两个目录下的所有文件(在下面是当前目录和根目录):</p>

<p> <img src="http://qiusli.github.io/images/linux-1_9.png"></p>

<p>以某种格式(这里是long format)显示当前目录下的所有文件:</p>

<p> <img src="http://qiusli.github.io/images/linux-1_10.png"></p>

<p>下面是可以用到的所有指令:</p>

<p> <img src="http://qiusli.github.io/images/linux-1_11.png"></p>

<p>当我们在用<code>-l</code>显示目录下的所以内容时,发现显示了许多具体的内容,下面这个列表表明了每个区域显示的内容的含义:</p>

<p> <img src="http://qiusli.github.io/images/linux-1_12.png"></p>

<p><code>tips</code>: 在创建新目录的时候,如果文件名之间有空格,最好用下划线代替.</p>

<h1>EXPLORING THE SYSTEM</h1>

<p><code>file</code>: 显示当前文件的所属类型.</p>

<p> <img src="http://qiusli.github.io/images/linux-1_13.png"></p>

<p><code>less</code>: 显示文件的具体内容.</p>

<p> <img src="http://qiusli.github.io/images/linux-1_14.png"></p>

<p>点击<code>q</code>退出浏览模式.</p>

<p>下面是在使用<code>less</code>浏览的时候可以使用的快捷键:</p>

<p> <img src="http://qiusli.github.io/images/linux-1_15.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式必知必会 4]]></title>
    <link href="http://qiusli.github.io/blog/2014/05/17/regex4/"/>
    <updated>2014-05-17T23:25:00-06:00</updated>
    <id>http://qiusli.github.io/blog/2014/05/17/regex4</id>
    <content type="html"><![CDATA[<h2>前后查找</h2>

<p>#</p>

<p><code>文本</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Ben Forta&#39;s Homepage<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>正则表达式</code>: \&lt;[Tt][Ii][Tt][Ll][Ee]>.*?\&lt;/[Tt][Ii][Tt][Ll][Ee]></p>

<p><code>结果</code>: \<title>Ben Forta&rsquo;s Homepage\</title></p>

<!-- more -->


<p>本意是想要匹配出标题里面的文字,但是结果确实连标题的tag也一起匹配出来了,尽管我们可以使用上一章讲到的子表达式来把正则表达式分成3块然后取第2块出来,但是这样不免有些麻烦,这个时候就可以使用前后查找来解决这个问题.</p>

<p><code>向前查找</code>(<code>?=</code>): 指定一个必须匹配但无需在结果中返回的模式.从语法上看,向前查找就是一个以<code>?=</code>开头的子表达式,需要匹配的文本跟在=后面.</p>

<p>#</p>

<p><code>文本</code>:</p>

<p><a href="http://www.forta.com">http://www.forta.com</a></p>

<p><a href="https://mail.forta.com">https://mail.forta.com</a></p>

<p><a href="ftp://ftp.forta.com">ftp://ftp.forta.com</a></p>

<p><code>正则表达式</code>: .+(?=:)</p>

<p><code>结果</code>: http    https     ftp</p>

<p>上面列出的URL地址里,协议和主机名以冒号<code>:</code>相隔.模式<code>.+</code>匹配任意文本,子表达式<code>(?=:)</code>匹配冒号<code>:</code>.值得注意的是被匹配到的<code>:</code>并没有出现在结果中,我们用<code>?=</code>向正则表达式引擎说明只要找到<code>:</code>就行了,不要把它包含在最终的结果里.</p>

<p>#</p>

<p><code>文本</code>:</p>

<p><a href="http://www.forta.com">http://www.forta.com</a></p>

<p><a href="https://mail.forta.com">https://mail.forta.com</a></p>

<p><a href="ftp://ftp.forta.com">ftp://ftp.forta.com</a></p>

<p><code>正则表达式</code>: .+(:)</p>

<p><code>结果</code>: <a href="http:">http:</a>    <a href="https:">https:</a>     <a href="ftp:">ftp:</a></p>

<p>这里的正则表达式没有使用向前查找,在最终的结果里面则包含了冒号.</p>

<h2>向后查找</h2>

<p><code>向后查找</code>(<code>?&lt;=</code>): 与向前查找大同小异.只是这次匹配但不返回的字符在首部了,它必须用在一个子表达式里.</p>

<p>#</p>

<p><code>文本</code>:</p>

<p>ABC01: $23.12</p>

<p>HGG42: $122.81</p>

<p>AIOS98: $981.02</p>

<p>HSW92: $72.33</p>

<p><code>正则表达式</code>: \$[\d.]+</p>

<p><code>结果</code>: $23.12    $122.81    $981.02    $72.33</p>

<p>本想要匹配具体的金额,但是连同<code>$</code>也被返回了,这里就是向后匹配大显身手的时候.</p>

<p>#</p>

<p><code>文本</code>:</p>

<p>ABC01: $23.12</p>

<p>HGG42: $122.81</p>

<p>AIOS98: $981.02</p>

<p>HSW92: $72.33</p>

<p><code>正则表达式</code>: (?&lt;=\$)[\d.]+</p>

<p><code>结果</code>: 23.12    122.81    981.02    72.33</p>

<h2>把向前和向后查找结合起来</h2>

<p>#</p>

<p><code>文本</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Ben Forta&#39;s Homepage<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>正则表达式</code>: (?&lt;=\&lt;[Tt][Ii][Tt][Ll][Ee]>).*?(?=\&lt;/[Tt][Ii][Tt][Ll][Ee]>)</p>

<p><code>结果</code>: Ben Forta&rsquo;s Homepage</p>

<p>这里我们在两个tag之前分别使用了向后和向前查找,表明匹配两个tag,但不返回它们,所以最后的结果就只包含字符.</p>

<h2>对前后查找取非</h2>

<p>我们前面遇到的向前查找和向后查找都是使用某个特殊字符来定位然后向前或者向后匹配,这种查找称为正向前查找(positive lookahead)和正向后查找(positive lookbehind).下面讲到的内容与之正好想法,称为负向前查找(negative lookahead)和负向后查找(negative lookbehind),顾名思义我们可以猜到它们其实就是匹配不以某个字符开头或者结尾的模式.</p>

<p> <img src="http://qiusli.github.io/images/regex-4_1.png"></p>

<p>#</p>

<p><code>文本</code>: I paid $30 for 100 apples, 50 oranges and 30 pears. I saved $5 on this order.</p>

<p><code>正则表达式</code>: (?&lt;=\$)\d+</p>

<p><code>结果</code>: 30    5</p>

<p>结果返回了以$开头的数字,既钱数. 接下来,如果我们只想查找水果个数.</p>

<p>#</p>

<p><code>文本</code>: I paid $30 for 100 apples, 50 oranges and 30 pears. I saved $5 on this order.</p>

<p><code>正则表达式</code>: \b(?&lt;!\$)\d+\b</p>

<p><code>结果</code>: 100    50    30</p>

<p>最后的结果只包含那些不以$开头的数字.值得注意的是我在这个正则表达式里面使用了分隔符<code>\b</code>,如果不使用这个,$30中的0也会被匹配.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式必知必会 3]]></title>
    <link href="http://qiusli.github.io/blog/2014/05/17/regex3/"/>
    <updated>2014-05-17T10:43:00-06:00</updated>
    <id>http://qiusli.github.io/blog/2014/05/17/regex3</id>
    <content type="html"><![CDATA[<h2>使用子表达式</h2>

<p>有些短语虽然中间有空格,但是通常希望被作为一个整体显示在一行以便浏览,比如 Windows 2000.这样通常在Windows和2000之间插入非换行型空格<code>&amp;nbsp</code>,它是non-breaking space的缩写.</p>

<p>#</p>

<p><code>文本</code>: Hello, my name is Ben<code>&amp;nbsp;</code>Forta, and I am the author on SQL, Coldfusion, WAP, windosw<code>&amp;nbsp;&amp;nbsp;</code>2000, and other subjects.</p>

<p><code>正则表达式</code>: <code>&amp;nbsp;</code>{2,}</p>

<p><code>结果</code>: 空</p>

<!-- more -->


<p>我们本想通过这个正则表达式来匹配至少出现两个<code>&amp;nbsp;</code>,但是却什么都没有匹配出来,这是因为{2,}只作用于紧跟在它前面的一个字符 &ndash; 那是一个分号,所以这个正则表达式能匹配<code>&amp;nbsp;;;;</code>这种字符.</p>

<p><code>子表达式</code>: 把一系列表达式划分为子表达式的目的是把那些子表达式当作一个个独立的单元来使用.子表达式需要用()括起来.</p>

<p>#</p>

<p><code>文本</code>: Hello, my name is Ben<code>&amp;nbsp;</code>Forta, and I am the author on SQL, Coldfusion, WAP, windosw<code>&amp;nbsp;&amp;nbsp;</code>2000, and other subjects.</p>

<p><code>正则表达式</code>: (<code>&amp;nbsp;</code>){2,}</p>

<p><code>结果</code>: <code>&amp;nbsp;&amp;nbsp;</code></p>

<p>#</p>

<p><code>文本</code>:</p>

<p>ID: 042</p>

<p>SEX: M</p>

<p>DOB: 1987-08-17</p>

<p>Status: Active</p>

<p><code>正则表达式</code>: 19|20\d{2}</p>

<p><code>结果</code>: 19</p>

<p>这里的正则表达式是期望匹配出一个年份,但是结果却不是希望的那样.这是因为这个正则表达式被解释成了匹配19或者20紧接着2个数字.如果想要达到正确的效果,需要把19|20作为一个子表达式.</p>

<p>#</p>

<p><code>文本</code>:</p>

<p>ID: 042</p>

<p>SEX: M</p>

<p>DOB: 1987-08-17</p>

<p>Status: Active</p>

<p><code>正则表达式</code>: (19|20)\d{2}</p>

<p><code>结果</code>: 1987</p>

<h3>子表达式的嵌套</h3>

<p>#</p>

<p><code>文本</code>: Pinging hog.forta.com [192.168.46.200] with 32 bytes data.</p>

<p><code>正则表达式</code>: ((\d{1,2}) | (1\d{1,2}) | (2[0-4]\d) | (25[0-5]).){3}((\d{1,2}) | (1\d{1,2}) | (2[0-4]\d) | (25[0-5]))</p>

<p><code>结果</code>: 192.168.46.200</p>

<p>这里使用了子表达式的嵌套来匹配IP'地址.子表达式表示的意思分别是:</p>

<ul>
<li>任何一位或两位的数字</li>
<li>任何以1开头的两位或者三位的数字</li>
<li>任何以2开头的第二位为0-4的三位数字</li>
<li>任何以25开头的第三位为0-5的三位数字</li>
</ul>


<p>这样的一个子表达式排除了其他不可能的情况,例如999.2222.222.0.</p>

<h2>回溯引用:前后一致匹配</h2>

<p>#</p>

<p><code>文本</code>:</p>

<p>\<H1>Welcome to my homepage \</H1></p>

<p>Content is divided into two sections</p>

<p>\<H2>ColdFusion\</H2></p>

<p>Information about macro media coldfusion</p>

<p>\<H2>Wireless\</H2></p>

<p>Information about 802.11 and more</p>

<p>\<H2>This is not a valid HTML\</H3></p>

<p><code>正则表达式</code>: &lt;[Hh][1-6]>.*?&lt;/[Hh][1-6]></p>

<p><code>结果</code>:</p>

<p>\<H1>Welcome to my homepage \</H1></p>

<p>\<H2>ColdFusion\</H2></p>

<p>\<H2>Wireless\</H2></p>

<p>\<H2>This is not a valid HTML\</H3></p>

<p>这个正则表达式看起来很有用,但是在匹配最后一个title的时候得到了我们不想要的结果,把H3和H2匹配成了一对.这是因为正则表达式在匹配后一个tag的时候对前一个tag毫无所知,这时候就是回溯引用能用到的地方.</p>

<p><code>回溯引用</code>: 允许正则表达式模式引用前面匹配的结果.</p>

<p>在解决这个问题之前,先看一看一个回溯引用的简单应用.</p>

<p>#</p>

<p><code>文本</code>: this is a block of of text, several words here are are repeated, and and they should not be</p>

<p><code>正则表达式</code>: \s+(\w+)\s+\1</p>

<p><code>结果</code>: of of      are are        and and</p>

<p>这里的正则表达式首先匹配一个或多个空格,然后使用一个子表达式匹配一个或多个字符,但是这里的子表达式不是用来做重复引用.接下来又匹配一个或多个空格,最后跟了一个\1,它的意思是引用第一个子表达式匹配到的字符,所以如果第一个表达式匹配到了A这个正则表达式就能匹配到 A A,\1就是一个回溯引用.\1表示引用第一个子表达式,如果前面有多个子表达式,可以通过\1,\2等来具体引用第几个子表达式.其实我们可以把子表达式想象成一个个变量,后面只是在使用前面定义的变量.</p>

<p>现在我们可以来试图解决前面的问题了.
#</p>

<p><code>文本</code>:</p>

<p>\<H1>Welcome to my homepage \</H1></p>

<p>Content is divided into two sections</p>

<p>\<H2>ColdFusion\</H2></p>

<p>Information about macro media coldfusion</p>

<p>\<H2>Wireless\</H2></p>

<p>Information about 802.11 and more</p>

<p>\<H2>This is not a valid HTML\</H3></p>

<p><code>正则表达式</code>: &lt;[Hh]([1-6])>.*?&lt;/[Hh]\1></p>

<p><code>结果</code>:
\<H1>Welcome to my homepage \</H1></p>

<p>\<H2>ColdFusion\</H2></p>

<p>\<H2>Wireless\</H2>这里在第二个tag引用了第一个tag后面跟着的数字,所以两个tag的数字就一样了.</p>

<p><code>note</code>: 回溯引用只能引用模式里的子表达式(用()括起来的正则表达式片段).</p>

<h3>回溯引用在替换中的应用</h3>

<p>#</p>

<p><code>文本</code>: Hello, my name is Ben Forta, my email address is <a href="&#x6d;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#98;&#101;&#x6e;&#x40;&#x66;&#x6f;&#114;&#x74;&#97;&#46;&#99;&#111;&#109;">&#98;&#101;&#x6e;&#x40;&#x66;&#111;&#114;&#116;&#x61;&#46;&#x63;&#111;&#109;</a></p>

<p><code>正则表达式</code>: \w[\w.]*@[\w.]+.\w+</p>

<p><code>结果</code>: <a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#98;&#x65;&#x6e;&#x40;&#102;&#x6f;&#x72;&#116;&#x61;&#x2e;&#x63;&#x6f;&#x6d;">&#98;&#101;&#110;&#x40;&#x66;&#x6f;&#114;&#x74;&#97;&#46;&#x63;&#x6f;&#x6d;</a></p>

<p>这里的正则表达式匹配了一个邮件地址.</p>

<p>如果我想要把邮件地址替换为可点击,需要使用下面这样的语法<code>\&lt;A href="mailto:ben@forta.com"&gt;ben@forta.com\&lt;/A&gt;</code>.</p>

<p>我们可以使用回溯引用来完成这个操作,首先找到需要匹配的文本,然后再你用这个文本填充上面的语法:</p>

<p>#</p>

<p><code>文本</code>: Hello, my name is Ben Forta, my email address is <a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#x62;&#x65;&#x6e;&#64;&#x66;&#111;&#x72;&#116;&#x61;&#x2e;&#99;&#x6f;&#x6d;">&#98;&#101;&#110;&#x40;&#102;&#x6f;&#x72;&#x74;&#97;&#46;&#99;&#111;&#109;</a></p>

<p><code>正则表达式</code>:  (\w[\w.]*@[\w.]+.\w+)</p>

<p><code>替换</code>: \<A href="mailto:$1">$1\</A></p>

<p><code>结果</code>: ben@forta.com成为了可点击的链接</p>

<p>这里的正则表达式分为两步,首先匹配到需要的文本,接着再使用回溯引用得到第一步匹配到的文本,然后用这个文本填充.回溯引用可以跨模式使用,第一个模式你们匹配到的文本可以在第二个文本里使用.</p>

<p><code>note</code>: 上面的例子中使用了$1而不是\1,这个是在JavaScript中的语法,比如在ColdFusion中就是\1,根据不同的语言有不同的语法,但效果都一样.</p>

<p>#</p>

<p><code>文本</code>:</p>

<p>314-683-7956</p>

<p>313-082-0121</p>

<p>010-203-4121</p>

<p>313-123-9921</p>

<p><code>正则表达式</code>: (\d{3})(-)(\d{3})(-)(\d{4})</p>

<p><code>替换</code>: ($1) $3-$5</p>

<p><code>结果</code>:</p>

<p>(314) 683-7956</p>

<p>(313) 082-0121</p>

<p>(010) 203-4121</p>

<p>(313) 123-9921</p>

<p>上面这个例子体现了如何回溯引用多个子表达式.达到的效果是替换电话号码的显示效果.</p>

<h3>大小写转换</h3>

<p>有些语言里的正则表达式允许使用一些特殊的元字符对匹配到的文本进行大小写转换</p>

<p> <img src="http://qiusli.github.io/images/regex-3_1.png">
#</p>

<p><code>文本</code>:</p>

<p>\<H1>Welcome to my homepage \</H1></p>

<p>Content is divided into two sections</p>

<p>\<H2>ColdFusion\</H2></p>

<p>Information about macro media coldfusion</p>

<p>\<H2>Wireless\</H2></p>

<p>Information about 802.11 and more</p>

<p>\<H2>This is not a valid HTML\</H3></p>

<p><code>正则表达式</code>: (&lt;[Hh]1>)(.*?)(&lt;/[Hh]1>)</p>

<p><code>替换</code>: $1\U$2\E$3</p>

<p><code>结果</code>:</p>

<p>\<H1>WELCOME TO MY HOMEPAGE \</H1></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式必知必会 2]]></title>
    <link href="http://qiusli.github.io/blog/2014/05/16/regex2/"/>
    <updated>2014-05-16T21:28:00-06:00</updated>
    <id>http://qiusli.github.io/blog/2014/05/16/regex2</id>
    <content type="html"><![CDATA[<h2>重复匹配</h2>

<h3>匹配一个或多个字符</h3>

<p><code>+</code>: 匹配一个或多个字符(不匹配零个字符的情况).</p>

<p>#</p>

<p><code>文本</code>: Send personal email to <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#98;&#x65;&#x6e;&#x40;&#x66;&#111;&#x72;&#x74;&#97;&#46;&#x63;&#x6f;&#x6d;&#46;">&#98;&#101;&#110;&#64;&#102;&#x6f;&#x72;&#x74;&#97;&#x2e;&#99;&#x6f;&#x6d;&#x2e;</a> For questions about the book use <a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#115;&#117;&#112;&#x70;&#111;&#114;&#x74;&#x40;&#x66;&#x6f;&#114;&#x74;&#x61;&#46;&#99;&#111;&#x6d;&#x2e;">&#x73;&#117;&#112;&#112;&#111;&#x72;&#x74;&#x40;&#102;&#111;&#114;&#x74;&#x61;&#46;&#x63;&#x6f;&#x6d;&#46;</a> Feel free to send unsolicited email to <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#115;&#112;&#97;&#x6d;&#x40;&#102;&#111;&#114;&#116;&#97;&#46;&#x63;&#x6f;&#x6d;&#x2e;">&#x73;&#x70;&#x61;&#109;&#x40;&#102;&#x6f;&#x72;&#116;&#x61;&#x2e;&#99;&#111;&#x6d;&#x2e;</a></p>

<p><code>正则表达式</code>: \w+@\w+.\w+</p>

<p><code>结果</code>: <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#98;&#x65;&#x6e;&#64;&#x66;&#111;&#x72;&#116;&#97;&#x2e;&#99;&#x6f;&#x6d;">&#x62;&#x65;&#x6e;&#64;&#102;&#111;&#114;&#116;&#97;&#x2e;&#x63;&#111;&#109;</a>  <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#x73;&#117;&#112;&#112;&#x6f;&#114;&#116;&#64;&#102;&#x6f;&#114;&#116;&#97;&#x2e;&#99;&#111;&#x6d;">&#115;&#117;&#x70;&#x70;&#111;&#x72;&#116;&#x40;&#x66;&#x6f;&#x72;&#x74;&#97;&#46;&#x63;&#111;&#109;</a>  <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#115;&#x70;&#97;&#x6d;&#x40;&#x66;&#111;&#114;&#x74;&#x61;&#x2e;&#x63;&#x6f;&#x6d;">&#115;&#112;&#97;&#x6d;&#x40;&#x66;&#x6f;&#114;&#x74;&#x61;&#x2e;&#x63;&#111;&#109;</a></p>

<!-- more -->


<p><code>*</code>: 匹配零个或多个字符.</p>

<p><code>?</code>: 匹配零个或一个字符.</p>

<p>#</p>

<p><code>文本</code>: The URL is <a href="http://www.forta.com,">http://www.forta.com,</a> to connect securely use <a href="https://www.forta.com.">https://www.forta.com.</a></p>

<p><code>正则表达式</code>: https?://[\w./]+</p>

<p><code>结果</code>:  <a href="http://www.forta.com">http://www.forta.com</a>   <a href="https://www.forta.com">https://www.forta.com</a></p>

<p>这里在s后面加了<code>?</code>,表示s既可以出现一次也可以不出现.</p>

<h2>匹配的重复次数</h2>

<p><code>重复次数 (interval)</code>: 精确定义<code>+</code>,<code>*</code>等元字符代表的字符的重复个数.这个个数定义在{}之间.</p>

<p>#</p>

<p>匹配RGB值(RGB值是由6个连续的任意字符或者0-9间的数字构成)</p>

<p><code>文本</code>: \<body bgcolor="#336655" text="#FFFFFF" height=10 width=20></p>

<p><code>正则表达式</code>: #[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]</p>

<p><code>结果</code>: #336655, #FFFFFF</p>

<p>修改后:</p>

<p>#</p>

<p>匹配RGB值(RGB值是由6个连续的任意字符或者0-9间的数字构成)</p>

<p><code>文本</code>: \<body bgcolor="#336655" text="#FFFFFF" height=10 width=20></p>

<p><code>正则表达式</code>: #[a-zA-Z0-9]{6}</p>

<p><code>结果</code>: #336655, #FFFFFF</p>

<p>上面的正则表达式规定{6}之前的字符连续出现6次.###为重复次数设定一个区间###</p>

<p>#</p>

<p><code>文本</code>: 4/8/03  10-6-2004  2/2/2  01-01-01</p>

<p><code>正则表达式</code>: \d{1,2}/[-\/]d{1,2}[-\/]\d{2,4}</p>

<p><code>结果</code>: 3/8/03 10-6-2004 01-01-01</p>

<p>上面在\d后面跟上了这个字符具体出现的次数区间,两边都是inclusive.###匹配"至少重复多少次"###</p>

<p>#</p>

<p><code>文本</code>:</p>

<p>1001: $489.02</p>

<p>1002: $42.33</p>

<p>1003: $1003.21</p>

<p>1004: $104.55</p>

<p>1005: $21.21</p>

<p><code>正则表达式</code>: \d+: \$\d{3,}.\d{2}</p>

<p><code>结果</code>: 1001: $489.02    1003: $1003.21    1004: $104.55</p>

<p>上面的正则表达式中\d{3,}表示至少出现3次数字,换句话说就是找金额大于100美元的匹配.</p>

<h2>防止过度匹配</h2>

<p>#</p>

<p><code>文本</code>: This offer is not available for customers living in <B>DC</B> and <B>MO</B></p>

<p><code>正则表达式</code>: &lt;[Bb]>.*&lt;[Bb]></p>

<p><code>结果</code>: <B>DC</B> and <B>MO</B></p>

<p>这样的结果显然不是我们预期的,这时因为<code>.*</code>属于贪婪型匹配,它们进行匹配的模式是多多益善而不是适可而止.它们会尽可能从一段文本的开头一直匹配到这段文本的结尾,而不是从这段文本的开头碰到第一个匹配为止.</p>

<p>为了达到我们想要的效果,我们需要使用元字符的<code>懒惰型</code>版本,这个版本与<code>贪婪型</code>正好相反.<code>懒惰型</code>版本的写法很简单,只需要在后面加上<code>?</code>后缀即可.</p>

<p> <img src="http://qiusli.github.io/images/regex-2_1.png"></p>

<p>所以,我们可以使用<code>懒惰型</code>字符匹配来解决上面的问题.</p>

<p>#</p>

<p><code>文本</code>: This offer is not available for customers living in <B>DC</B> and <B>MO</B></p>

<p><code>正则表达式</code>: &lt;[Bb]>.*?&lt;[Bb]></p>

<p><code>结果</code>: <B>DC</B>     <B>MO</B></p>

<h2>位置匹配</h2>

<p>位置匹配用来解决在什么地方进行字符串匹配操作的问题.</p>

<p>#</p>

<p><code>文本</code>: The cat scattered his food all over the room.</p>

<p><code>正则表达式</code>: cat</p>

<p><code>结果</code>: The <code>cat</code> s<code>cat</code>tered his food all over the room.</p>

<p>这里的cat把一句话中的所有cat都找了出来,无论匹配的字符是单独的还是单词的一部分.</p>

<p>解决这个问题的办法只有一个:使用边界限定符,也就是在正则表达式里用一些特殊的元字符来表明我们想要匹配操作在什么位置发生.</p>

<h3>单词边界</h3>

<p><code>\b</code>: 匹配单词的开始或结尾.</p>

<p>#</p>

<p><code>文本</code>: The cat scattered his food all over the room.</p>

<p><code>正则表达式</code>: \bcat\b</p>

<p><code>结果</code>: The <code>cat</code> scattered his food all over the room.</p>

<p>单词cat的前后都有一个空格,空格是用来分割单词的字符之一.而单词scattered中的cat不能与之匹配,因为scattered中的cat前一个字符是s后一个字符是t,都不能与<code>\b</code>匹配.</p>

<p><code>\b</code>中的b是boundary的意思,它匹配这样一个位置,这个位置位于一个能用来构成单词的字符(字母数字和下划线, 即\w)和不能构成单词的字符(即\W)之间.
值得注意的是如果想要匹配一个完整的单词,就需要在前后都加上<code>\b</code>.</p>

<p>#</p>

<p><code>文本</code>: The captain wear his cap and cape proudly as he sat and listening to the recap of how his crew saved a men from a capsized vessel.</p>

<p><code>正则表达式</code>: \bcap</p>

<p><code>结果</code>: The <code>cap</code>tain wear his <code>cap</code> and <code>cap</code>e proudly as he sat and listening to the recap of how his crew saved a men from a <code>cap</code>sized vessel.</p>

<p>这里的正则表达式匹配以cap开头的任意单词.</p>

<p>#</p>

<p><code>文本</code>: The captain wear his cap and cape proudly as he sat and listening to the recap of how his crew saved a men from a capsized vessel.</p>

<p><code>正则表达式</code>: cap\b</p>

<p><code>结果</code>: The captain wear his <code>cap</code> and cape proudly as he sat and listening to the re<code>cap</code> of how his crew saved a men from a capsized vessel.</p>

<p>这里的正则表达式匹配以cap结尾的任意单词.</p>

<p>如果想要表面不匹配单词边界,可以使用<code>\B</code>.</p>

<p>#</p>

<p><code>文本</code>: Please enter the nine-digit id as it appeared on your color - coded pass-key.</p>

<p><code>正则表达式</code>: \B-\B</p>

<p><code>结果</code>: color - coded</p>

<p>\B-\B匹配前后都不是单词边界的连字符.</p>

<h3>字符串边界</h3>

<p><code>^</code>: 匹配字符串开头.
<code>$</code>: 匹配字符串结尾.</p>

<p><code>note</code>: <code>^</code>是一个多用途的元字符.当它在[]之间并且紧跟在[之后的时候,它表示取非.如果在字符集合的外面并在一个模式开头的时候,它将匹配字符串的开头.</p>

<p>#</p>

<p><code>文本</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;person&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Qiushi\<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;age&gt;</span>25\<span class="nt">&lt;/age&gt;</span>
</span><span class='line'><span class="nt">&lt;/person&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>正则表达式</code>: \&lt;\?xml .* \?></p>

<p><code>结果</code>: \&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo; ?></p>

<p>一个合法的XML文档都需要以文本的第一行作为开始,这里我想用这个正则表达式来匹配这个XML的头行,这里似乎奏效,但是其实不然.因为即使我在第一行前面加上一些支付,这个匹配也能成功.</p>

<p>#</p>

<p><code>文本</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>some text before
</span><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;person&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Qiushi<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;age&gt;</span>25<span class="nt">&lt;/age&gt;</span>
</span><span class='line'><span class="nt">&lt;/person&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>正则表达式</code>: \&lt;\?xml .* \?></p>

<p><code>结果</code>: \&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo; ?></p>

<p>但显然这不是我想要的结果,因为头文件不在第一行,表示这不是一个合法的XML文件.</p>

<p>#</p>

<p><code>文本</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;person&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Qiushi<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;age&gt;</span>25<span class="nt">&lt;/age&gt;</span>
</span><span class='line'><span class="nt">&lt;/person&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>正则表达式</code>: ^\s<em> \&lt;\?xml .</em> \?></p>

<p><code>结果</code>: \&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo; ?></p>

<p>这一次对了,^\s*表示在文本的开头能有空格(包括回车,换行等), 但不能以其他的字符开头.</p>

<p>#</p>

<p><code>文本</code>: \<html>haha\</html></p>

<p><code>正则表达式</code>: \&lt;/[Hh][Tt][Mm][Ll]>\s$</p>

<p><code>匹配</code>: \</html></p>

<p>这里的正则表达式以\s$结尾,表示能有空格,但不能有其他字符.</p>

<h3>分行匹配模式</h3>

<p><code>?m</code>: 分行匹配模式将把行分割符当作一个字符串分隔符来对待.在分行匹配模式下,<code>^</code>不仅匹配字符串的开头,还匹配分隔符(换行符)后面开始的位置.<code>$</code>不仅匹配字符串的结束,还匹配分隔符(换行符)后面的结束位置.在使用分行匹配模式的时候,<code>?m</code>必须出现在正则表达式的最前面.</p>

<p>#</p>

<p><code>文本</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">doSpellCheck</span><span class="p">(</span><span class="nx">form</span><span class="p">,</span> <span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// make sure not empty</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span> <span class="o">==</span> <span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// init</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">windowName</span> <span class="o">=</span> <span class="s2">&quot;spellWindow&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Done</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>正则表达式</code>: ?m^\s<em>//.</em>$</p>

<p><code>结果</code>: // make sure not empty        // init       // Done</p>

<p><code>^\s*//.*$</code>匹配一个字符串的开始,然后是任意多的空白字符,然后是//.再往后是任意文本,最后是字符串的结束.不过因为<code>*</code>是贪婪型字符,它将匹配第一条注释开始直到文本的结尾.加上<code>?m</code>之后,<code>?m^\s*//.*$</code>将把换行符作为一个字符串分隔符,这样就可以把每一行注释匹配出来了.</p>
]]></content>
  </entry>
  
</feed>
